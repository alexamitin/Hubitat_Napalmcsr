/**
*  Smart Humidity Fan
*
*  Turns on a fan when you start taking a shower... turns it back off when you are done.
*    -Uses humidity change rate for rapid response
*    -Timeout option when manaully controled (for stench mitigation)
*    -Child/Parent with pause/resume (Thanks to Lewis.Heidrick!)
*
*  Copyright 2018 Craig Romei
*  GNU General Public License v2 (https://www.gnu.org/licenses/gpl-2.0.txt)
*
*/

def setVersion() {
    state.version = "1.0.4" // Version number of this app
    state.InternalName = "BathroomHumidityFan"   // this is the name used in the JSON file for this app
}

definition(
    name: "Bathroom Humidity Fan Child",
    namespace: "Craig.Romei",
    author: "Craig Romei",
    description: "Control a fan (switch) based on relative humidity.",
    category: "Convenience",
    parent: "Craig.Romei:Bathroom Humidity Fan",
    iconUrl: "https://raw.githubusercontent.com/napalmcsr/SmartThingsStuff/master/smartapps/craig-romei/Bathroom_Fan.jpg",
    iconX2Url: "https://raw.githubusercontent.com/napalmcsr/SmartThingsStuff/master/smartapps/craig-romei/Bathroom_Fan.jpg",
    iconX3Url: "https://raw.githubusercontent.com/napalmcsr/SmartThingsStuff/master/smartapps/craig-romei/Bathroom_Fan.jpg",
    importUrl: "https://raw.githubusercontent.com/napalmcsr/Hubitat_Napalmcsr/master/Apps/BathroomHumidityFan/BathroomHumidityChild.src")

preferences {
    page(name: "mainPage")
    page(name: "timeIntervalInput", title: "Only during a certain time") {
		section {
			input "starting", "time", title: "Starting", required: false
			input "ending", "time", title: "Ending", required: false
       }
    }
}

def mainPage() {
  if (!isDebug) {
      app.updateSetting("isDebug", false)
  }
  ifDebug("mainPage")
  if (isDebug == true) {
      runIn(1800, debugOff)
  }
  section() {
  }
    dynamicPage(name: "mainPage", install: true, uninstall: true) {
    if (state.paused) {
      state.pauseButtonName = "Resume"
      state.status = "Paused"
        if (state.installed){
          updateLabel()
        }
    } else {
      state.pauseButtonName = "Pause"
        if (state.installed){
          updateLabel()
        }
    }
    section("") {
      input name: "pause", type: "button", title: state.pauseButtonName, submitOnChange:true
    }     
    section("") {
    String defaultName = "Enter a name for this child app"
        if (state.displayName) {
            defaultName = state.displayName
            app.updateLabel(defaultName)
        }
    label title: "Enter a name for this child app", required:false, defaultValue: defaultName, submitOnChange:true   
    }
	   	section("") {
			input "HumiditySensor", "capability.relativeHumidityMeasurement", title: "Humidity Sensor:", required: true
			paragraph "NOTE: The humidity sensor you select will need to report about 5 min or less."
           	input "FanSwitch", "capability.switch", title: "Fan Location:", required: true
            input "CompareHumiditySensor", "capability.relativeHumidityMeasurement", title: "Compare to this baseline Humidity Sensor:", required: false
		}
		section("Fan Activation")
		{
			input "HumidityIncreaseRate", "number", title: "Humidity Increase Rate :", required: true, defaultValue: 2
			input "HumidityThreshold", "number", title: "Humidity Threshold (%):", required: false, defaultValue: 65
			input "FanOnDelay", "number", title: "Delay turning fan on (Minutes):", required: false, defaultValue: 0
            
		}
		section("Fan Deactivation")
		{
			input "HumidityDropTimeout", "number", title: "How long after the humidity starts to drop should the fan turn off (minutes):", required: true, defaultValue:  10
			input "HumidityDropLimit", "number", title: "What percentage above the starting humidity before triggering the turn off delay:", required: true, defaultValue:  25
            input "MaxRunTime", "number", title: "Maximum time(minutes) for Fan to run when automatically turned on:", required: false, defaultValue: 120
            input "HumidityIncreasedBy", "number", title: "When humidity rises above or equal to this amount plus the baseline sensor humidity turn on the fan: ", required: false, defaultValue: 9
		}
		section("Manual Activation")
		{
			input "ManualControlMode", "enum", title: "When should the fan turn off when turned on manually?", required: true, options: ["Manually", "By Humidity", "After Set Time"], defaultValue: "After Set Time"
			input "ManualOffMinutes", "number", title: "How many minutes until the fan is auto-turned-off?", required: false, defaultValue: 20
		}
        section(title: "Additional Features:", hideable: true, hidden: hideOptionsSection()) {
		    input "deviceActivationSwitch", "capability.switch", title: "Switches to turn on and off the fan immediately.", submitOnChange:false, required:false, multiple:true
        }
        section("Logging") {                    
		    input "isDebug", "bool", title: "Enable debug logging for 30 minutes", submitOnChange: true, defaultValue: false
            input "ifLevel","enum", title: "IDE logging level",required: true, options: getLogLevels(), defaultValue : "1"
		}
        section(title: "Only Run When:", hideable: true, hidden: hideOptionsSection()) {
		    def timeLabel = timeIntervalLabel()
		    href "timeIntervalInput", title: "Only during a certain time", description: timeLabel ?: "Tap to set", state: timeLabel ? "complete" : null
		    input "days", "enum", title: "Only on certain days of the week", multiple: true, required: false,
		    options: ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
		    input "modes", "mode", title: "Only when mode is", multiple: true, required: false
            input "enableDisableSwitch", "capability.switch", title: "Switch to Enable and Disable this app.", submitOnChange:true, required:false, multiple:true
        }
	}
}
// Application settings and startup
def installed() {
    ifDebug("installed")
    initialize()
    state.paused = false
    state.installed = true
}

def updated() {
    ifDebug("updated")
    unsubscribe()
    unschedule()
    initialize()
    updateLabel()
}

def initialize() {
    ifDebug("initialize")
    ifDebug("Settings: ${settings}")
    subscribe(FanSwitch, "switch", FanSwitchHandler)
    subscribe(enableDisableSwitch, "switch.on", enableDisableOnHandler)
    subscribe(enableDisableSwitch, "switch.off", enableDisableOffHandler)
    state.enableDisable = true
    enableDisable = "(Enabled)"
    subscribe(deviceActivationSwitch, "switch.on", deviceActivationSwitchHandler)
    subscribe(deviceActivationSwitch, "switch.off", deviceActivationSwitchHandler)
    state.OverThreshold = false
    state.AutomaticallyTurnedOn = false
    state.TurnOffLaterStarted = false
    subscribe(HumiditySensor, "humidity", HumidityHandler)
    subscribe(FanSwitch, "switch", FanSwitchHandler)
    subscribe(location, "mode", modeChangeHandler)
	compareHumidity()
    updateLabel()
}

// Device Handlers
def modeChangeHandler(evt) {
	ifDebug("modeChangeHandler")
    checkEnableDisableHandler()
    def allModes = settings.modes
	if(allModes)
	{
		if(!allModes.contains(location.mode))
		{
			ifDebug("modeChangeHandler: Entered a disable mode, turning off the Fan")
			TurnOffFanSwitch()
		}
	} 
	else
	{	
		ifDebug("modeChangeHandler: Entered a disable mode, turning off the Fan")
		TurnOffFanSwitch()
	}
}

def HumidityHandler(evt) {
	ifDebug("HumidityHandler")
    checkEnableDisableHandler()
	def allModes = settings.modes
	def modeStop = false
	ifDebug("HumidityHandler: state.OverThreshold = ${state.OverThreshold}")
	ifDebug("HumidityHandler: state.AutomaticallyTurnedOn = ${state.AutomaticallyTurnedOn}")
	ifDebug("HumidityHandler: state.TurnOffLaterStarted = ${state.TurnOffLaterStarted}")
	ifDebug("HumidityHandler: Before")
	ifDebug("HumidityHandler: state.lastHumidity = ${state.lastHumidity}")
	ifDebug("HumidityHandler: state.lastHumidityDate = ${state.lastHumidityDate}")
	ifDebug("HumidityHandler: state.currentHumidity = ${state.currentHumidity}")
	ifDebug("HumidityHandler: state.currentHumidityDate = ${state.currentHumidityDate}")
	ifDebug("HumidityHandler: state.StartingHumidity = ${state.StartingHumidity}")
	ifDebug("HumidityHandler: state.HighestHumidity = ${state.HighestHumidity}")
	ifDebug("HumidityHandler: state.HumidityChangeRate = ${state.HumidityChangeRate}")
	ifDebug("HumidityHandler: state.targetHumidity = ${state.targetHumidity}")
    if (CompareHumiditySensor == null) {
      state.threshold = HumidityThreshold
    } else {
      state.threshold = state.baselineHumidity + HumidityIncreasedBy
      state.thresholdOff = state.baselineHumidity + HumidityDecreasedBy
    }
    
    state.OverThreshold = CheckThreshold(evt)
	state.lastHumidityDate = state.currentHumidityDate
    if (CompareHumiditySensor == null) {
	    state.currentHumidity = Double.parseDouble(evt.value.replace("%", ""))
        ifDebug("Current humidity update: ${state.currentHumidity} from: ${evt.device}")
    }
    if (!CompareHumiditySensor == null) {
        if (evt.deviceId == CompareHumiditySensor.deviceId) 
        {
            state.baselineHumidity = Double.parseDouble(evt.value.replace("%", ""))
            ifDebug("Baseline humidity update : ${state.baselineHumidity} from: ${evt.device}")
        } 
        else 
        {
            state.currentHumidity = Double.parseDouble(evt.value.replace("%", ""))
            ifDebug("Current humidity update: ${state.currentHumidity} from: ${evt.device}")
        }
    }
    if (state.currentHumidity)
	{
		state.lastHumidity = state.currentHumidity
	}
	else
	{
		state.lastHumidity = 100
	}
	if (!state.StartingHumidity)
	{
		state.StartingHumidity = 100
	}
	if (!state.HighestHumidity)
	{
		state.HighestHumidity = 100
	}
	state.currentHumidityDate = evt.date.time
	state.HumidityChangeRate = state.currentHumidity - state.lastHumidity
	if(state.currentHumidity>state.HighestHumidity)
	{
		state.HighestHumidity = state.currentHumidity
	}
	state.targetHumidity = state.StartingHumidity+HumidityDropLimit/100*(state.HighestHumidity-state.StartingHumidity)              
	ifDebug("HumidityHandler: After")
	ifDebug("HumidityHandler: state.lastHumidity = ${state.lastHumidity}")
	ifDebug("HumidityHandler: state.lastHumidityDate = ${state.lastHumidityDate}")
	ifDebug("HumidityHandler: state.currentHumidity = ${state.currentHumidity}")
	ifDebug("HumidityHandler: state.currentHumidityDate = ${state.currentHumidityDate}")
	ifDebug("HumidityHandler: state.baselineHumidity = ${state.baselineHumidity}")
    ifDebug("HumidityHandler: state.StartingHumidity = ${state.StartingHumidity}")
    ifDebug("HumidityHandler: state.threshold = ${state.threshold}")
    ifDebug("HumidityHandler: state.thresholdOff = ${state.thresholdOff}")
	ifDebug("HumidityHandler: state.HighestHumidity = ${state.HighestHumidity}")
	ifDebug("HumidityHandler: state.HumidityChangeRate = ${state.HumidityChangeRate.round(2)}")
	ifDebug("HumidityHandler: state.targetHumidity = ${state.targetHumidity}")
	ifDebug("HumidityHandler: FanSwitch.current state = ${FanSwitch.currentValue("switch")}")
	//if the humidity is high (or rising fast) and the fan is off, kick on the fan
	if(allModes) {
		if(!allModes.contains(location.mode))
		{
			modeStop = true
		}
	}
	ifDebug("HumidityHandler: modeStop.current state = ${modeStop}")
    if (((state.HumidityChangeRate>HumidityIncreaseRate)||state.OverThreshold) && (FanSwitch.currentValue("switch") == "off")&&!modeStop&&!state.AutomaticallyTurnedOn)
    {
		state.AutomaticallyTurnedOn = true
		state.TurnOffLaterStarted = false
        state.AutomaticallyTurnedOnAt = new Date().format("yyyy-MM-dd HH:mm")
		ifInfo("HumidityHandler: Turn On Fan due to humidity increase")
        ifInfo("HumidityHandler: Baseline humidity = (${CompareHumiditySensor}): ${state.baselineHumidity}")
        if ((FanOnDelay>0)&&(FanOnDelay!=null))
        {
            ifDebug("HumidityHandler: Turn On Fan later")
            runIn(60 * FanOnDelay.toInteger(), TurnOnFan)
        }
        else
        {
	    TurnOnFan()
        }
        state.StartingHumidity = state.lastHumidity
        state.HighestHumidity = state.currentHumidity    
		ifDebug("HumidityHandler: new state.StartingHumidity = ${state.StartingHumidity}")
		ifDebug("HumidityHandler: new state.HighestHumidity = ${state.HighestHumidity}")
		ifDebug("HumidityHandler: new state.targetHumidity = ${state.targetHumidity}")
	}
    else if ( ((state.currentHumidity)>=(state.threshold)) && (FanSwitch.currentValue("switch") == "off") && !modeStop)
    {
        state.AutomaticallyTurnedOn = true
        state.TurnOffLaterStarted = false
        state.AutomaticallyTurnedOnAt = new Date().format("yyyy-MM-dd HH:mm")
        ifInfo("Turn On Fan due to humidity increase")
        ifInfo("${HumiditySensor} humidity exceeded: ${state.threshold}, current humidity: ${state.currentHumidity}")
        ifInfo("Waiting to drop below ${state.thresholdOff} to start timed off sequence")
        FanSwitch.on()
        state.status = "(On)"
        updateLabel()
    }
	//turn off the fan when humidity returns to normal and it was kicked on by the humidity sensor
	else if((state.AutomaticallyTurnedOn || ManualControlMode == "By Humidity")&& !state.TurnOffLaterStarted)
	{    
        if(state.currentHumidity<=state.targetHumidity)
        {
            if(HumidityDropTimeout == 0)
            {
                ifInfo("HumidityHandler: Turning the Fan off now")
                TurnOffFanSwitch()
            }
            else
            {
				ifInfo("HumidityHandler: Turn Fan off in ${HumidityDropTimeout} minutes.")
				state.TurnOffLaterStarted = true
				runIn(60 * HumidityDropTimeout.toInteger(), TurnOffFanSwitchCheckHumidity)
				ifDebug("HumidityHandler: state.TurnOffLaterStarted = ${state.TurnOffLaterStarted}")
			}
		}
	}
}

def FanSwitchHandler(evt) {
    ifDebug("FanSwitchHandler")
    checkEnableDisableHandler()
    if (enableDisable == "Enabled" || enableDisable == null) {
        if (evt.value == "on") {
            if(!state.AutomaticallyTurnedOn && (ManualControlMode == "After Set Time") && ManualOffMinutes) {
	            if(ManualOffMinutes == 0) {
                    ifDebug("FanSwitchHandler: Turning the Fan off now")
                    TurnOffFanSwitch()
			    } else {
                    ifDebug("FanSwitchHandler: Will turn off later")
                    runIn(60 * ManualOffMinutes.toInteger(), TurnOffFanSwitch)
                    state.status = "(On)"
                }
            }    
        }
    } else {
        if (evt.value == "off") {
            ifDebug("FanSwitchHandler: Switch turned off")
            state.status = "(Off)"
            state.AutomaticallyTurnedOn = false
            state.TurnOffLaterStarted = false
            unschedule()
        }
    }
    updateLabel()
}

def enableDisableOnHandler(evt) {
    ifDebug("enableDisableOnHandler")
    if(enableDisableSwitch) {
        enableDisableSwitch.each { it ->
        enableDisableSwitchState = it.currentValue("switch")
            if (enableDisableSwitchState == "on") {
                ifDebug("enableDisableOnHandler: enableDisableSwitchState = ${enableDisableSwitchState}")
                state.enableDisableSwitchState = true
                enableDisableSwitchState = "Enabled"
                ifInfo("enableDisableOnHandler: Enable/Disable switch turned on")
            } else if (enableDisableSwitchState == "off") {
                state.enableDisableSwitchState = true
                enableDisableSwitchState = "Disabled"
            }
        }
    } else {
        state.enableDisableSwitchState = false
    }
checkEnableDisableHandler()
}

def enableDisableOffHandler(evt) {
    ifDebug("enableDisableOffHandler")
    if(enableDisableSwitch) {
        enableDisableSwitch.each { it ->
        enableDisableSwitchState = it.currentValue("switch")
            if(enableDisableSwitchState == "off") {
                ifDebug("enableDisableOffHandler: enableDisableSwitchState = ${enableDisableSwitchState}")
                state.enableDisableSwitchState = true
                enableDisableSwitchState = "Disabled"
                ifInfo("enableDisableOnHandler: Enable/Disable switch turned off")
            } else if (enableDisableSwitchState == "on") {
                state.enableDisableSwitchState = true
                enableDisableSwitchState = "Enabled"
            }
        }
    } else {
        state.enableDisableSwitchState = false
    }
checkEnableDisableHandler()    
}

def deviceActivationSwitchHandler(evt) {
    ifDebug("deviceActivationSwitchHandler")
    checkPausedOrDisabled()
    if (state.pausedOrDisabled == false) {
        if(deviceActivationSwitch) {
            deviceActivationSwitch.each { it ->
                deviceActivationSwitchState = it.currentValue("switch")
            }
                    if (deviceActivationSwitchState == "on") {
                        ifDebug("deviceActivationSwitchHandler: Turning the Fan on now")
                        TurnOnFan()
                        state.AutomaticallyTurnedOn = false
                    } else if (deviceActivationSwitchState == "off") {
                        ifDebug("deviceActivationSwitchHandler: Turning the Fan off now")
                        TurnOffFanSwitch()
                        state.TurnOffLaterStarted = false
                        unschedule()
                        updateLabel()
                    }
        }
    } else {
        ifDebug("deviceActivationSwitchHandler: Application is paused or disabled.")
    }
}
    
//Label Updates
void updateLabel() {
    ifDebug("updateLabel")
    if (!app.label.contains("<span") && !app.label.contains("Paused") && !app.label.contains("Disabled")) {
        state.displayName = app.label
    }
    ifDebug("updateLabel: state.status = ${state.status}")
    if (state?.status || state?.paused || state?.enableDisable) {
      def status = state?.status
      String label = "${state.displayName} <span style=color:"
      if (enableDisable == "Disabled") {
            status = "(Disabled)"
            state.status = "(Disabled)"
            label += "red"
        } else if (state?.paused) {
            status = "(Paused)"
            label += "red"
        } else if (state.status == "(On)") {
            status = "(On)"
            label += "green"
        } else if (state.status == "(Off)") {
            status = "(Off)"
            label += "blue"
        } else {
            status = "(Unknown)"
            label += "Unknown"
        }
    label += ">${status}</span>"
    app.updateLabel(label)
    }
}

def appButtonHandler(btn) {
  if (btn == "pause") {
    state.paused = !state.paused
    if (state.paused) {
      unschedule()
      unsubscribe()
      updateLabel()
    } else {
      initialize()
      updateLabel()
    }
  }
}

// Logic functions

// Application Page settings
private hideOptionsSection() {
	(starting || ending || days || modes || manualCount) ? false : true
}

private getAllOk() {
	modeOk && daysOk && timeOk
}

private getModeOk() {
	def result = !modes || modes.contains(location.mode)
    ifDebug("modeOk = ${result}")
	result
}

private getDaysOk() {
	def result = true
	if (days) {
		def df = new java.text.SimpleDateFormat("EEEE")
		if (location.timeZone) {
			df.setTimeZone(location.timeZone)
		}
		else {
			df.setTimeZone(TimeZone.getTimeZone("America/New_York"))
		}
		def day = df.format(new Date())
		result = days.contains(day)
	}
    ifDebug("daysOk = ${result}")
	result
}

private getTimeOk() {
	def result = true
	if (starting && ending) {
		def currTime = now()
		def start = timeToday(starting).time
		def stop = timeToday(ending).time
		result = start < stop ? currTime >= start && currTime <= stop : currTime <= stop || currTime >= start
	}
    ifDebug{"timeOk = ${result}"}
	result
}

private hhmm(time, fmt = "h:mm a") {
	def t = timeToday(time, location.timeZone)
	def f = new java.text.SimpleDateFormat(fmt)
	f.setTimeZone(location.timeZone ?: timeZone(time))
	f.format(t)
}
    
private timeIntervalLabel() {
	(starting && ending) ? hhmm(starting) + "-" + hhmm(ending, "h:mm a z") : ""
}


// Application functions
def TurnOffFanSwitchMaxTime() {
    ifDebug("TurnOffFanSwitchMaxTime")
	TurnOffFanSwitch()
}

def TurnOffFanSwitchCheckHumidity() {
    ifDebug("TurnOffFanSwitchCheckHumidity")
	if (FanSwitch.currentValue("switch") == "on") {
		if(state.currentHumidity > state.targetHumidity) {
			ifDebug("TurnOffFanSwitchCheckHumidity: Didn't turn off fan because humidity rate is ${state.HumidityChangeRate}")
			state.AutomaticallyTurnedOn = true
			state.TurnOffLaterStarted = false
		} else {
			TurnOffFanSwitch()
		}
	}
}

def TurnOffFanSwitch() {
    ifDebug("TurnOffFanSwitch")
    if (FanSwitch.currentValue("switch") == "on")
    {
        ifInfo("TurnOffFanSwitch: Turning the Fan off now")
        FanSwitch.off()
        state.status = "(Off)"
        updateLabel()
        state.AutomaticallyTurnedOn = false
        state.TurnOffLaterStarted = false
    }
}

def TurnOffFanSwitchManual() {
    ifDebug("TurnOffFanSwitchManual")
    if ((FanSwitch.currentValue("switch") == "on") && (state.AutomaticallyTurnedOn == false))
    {
        ifInfo("TurnOffFanSwitchManual: Turning the Fan off now")
        FanSwitch.off()
        state.status = "(Off)"
        updateLabel()
        state.AutomaticallyTurnedOn = false
        state.TurnOffLaterStarted = false
    }
    else
    {
        ifInfo("Not turning off switch, either the switch was off or the Auto routine kicked in")
    }
}

def TurnOnFan() {
    ifDebug("TurnOnFan")
    FanSwitch.on()
    state.status = "(On)"
    updateLabel()
    if (MaxRunTime)
    {
        ifDebug("Maximum run time is ${MaxRunTime} minutes")
        runIn(60 * MaxRunTime.toInteger(), TurnOffFanSwitchMaxTime)
    }
}
                  
def CheckThreshold(evt) {
	ifDebug("CheckThreshold")
    double lastevtvalue = Double.parseDouble(evt.value.replace("%", ""))
    if (lastevtvalue >= HumidityThreshold) {  
		ifInfo("IsHumidityPresent: Humidity is above the Threashold")
		return true
	}
	else
	{
		return false
	}
}

def compareHumidity() {
    ifDebug("compareHumidity")
    if (CompareHumiditySensor == null) {
      myHumid = state.targetHumidity
    } else {
        if (!state.baselineHumidity) { 
          subscribe(CompareHumiditySensor, "humidity", HumidityHandler)
          myHumid = CompareHumiditySensor.currentState("humidity")
          ifDebug("${CompareHumiditySensor} currently: ${myHumid.value}")
          state.baselineHumidity = myHumid.value
        }
    }
}

def checkEnableDisableHandler() {
    ifDebug("checkEnableDisableHandler")
    if (state.enableDisableSwitchState == true) {
        if (enableDisableSwitchState == "Enabled") {
            enableDisable = "Enabled"
            state.enableDisable = true
        }
        if (enableDisableSwitchState == "Disabled") {
            enableDisable = "Disabled"
            state.enableDisable = true
        }
    } else if (!enableDisableSwitchState) {
        enableDisable = "Enabled"
        state.enableDisable = true
    } else {
    enableDisable = "Unknown"
    state.enableDisable = false
    }
fanStatus()
}

def checkPausedOrDisabled() {
    if (state?.enabledDisabled || state?.paused) { state.pausedOrDisabled = true } else { state.pausedOrDisabled = false }
}

def changeMode(mode) {
    ifDebug("Changing Mode to: ${mode}")
	if (location.mode != mode && location.modes?.find { it.name == mode}) setLocationMode(mode)
}

def fanStatus() {
    ifDebug("fanStatus")
    if (FanSwitch.currentValue("switch") == "on") {
        if (!state?.paused || !state?.enableDisableSwitch) {
            state.status = "(On)"
            updateLabel()
        } else {
            log.info "${app.label} is Paused or Disabled"        
        }
    }
    if (FanSwitch.currentValue("switch") == "off")
    {
        if (!state?.paused || !state?.enableDisableSwitch) {
           state.status = "(Off)"
           updateLabel()
           } else {
           log.info "${app.label} is Paused or Disabled"        
        }
    }
}

// Logging functions
def disableDebugIn30() {
    if (isDebug == true) {
        runIn(1800, debugOff)
        log.info "Debug logging disabling in 30 minutes."
    }
}
    
def ifDebug(msg) {
	if(isDebug == true) {
        log.debug "${state.displayName}: ${msg}"
    }
}

def debugOff() {
    app.updateSetting("isDebug", false)
    log.info "${state.displayName} ${appVersion()}: Debug logging auto disabled"
}

def getLogLevels(){
    return [["0":"None"],["1":"Info"]]
}

def ifInfo(msg) {       
    def logL = 0
    if (ifLevel) logL = ifLevel.toInteger()
    if (logL == 0) {return}//bail
    else if (logL >= 1)
	{
		log.info "${state.displayName}: ${msg}"
	}
}

def ifWarn(msg) {
    log.warn "${state.displayName}}: ${msg}"
}

def ifTrace(msg) {
    log.trace "${state.displayName} ${device.label}: ${msg}"
}
