/**
*  Smart Humidity Fan
*
*  Turns on a fan when you start taking a shower... turns it back off when you are done.
*    -Uses humidity change rate for rapid response
*    -Timeout option when manaully controled (for stench mitigation)
*    -Child/Parent with pause/resume (Thanks to Lewis.Heidrick!)
*
*  Copyright 2018 Craig Romei
*  GNU General Public License v2 (https://www.gnu.org/licenses/gpl-2.0.txt)
*
*/

def setVersion() {
    state.version = "1.0.9" // Version number of this app
    state.InternalName = "BathroomHumidityFan"   // this is the name used in the JSON file for this app
}

definition(
    name: "Bathroom Humidity Fan Child",
    namespace: "Craig.Romei",
    author: "Craig Romei",
    description: "Control a fan (switch) based on relative humidity.",
    category: "Convenience",
    parent: "Craig.Romei:Bathroom Humidity Fan",
    iconUrl: "https://raw.githubusercontent.com/napalmcsr/SmartThingsStuff/master/smartapps/craig-romei/Bathroom_Fan.jpg",
    iconX2Url: "https://raw.githubusercontent.com/napalmcsr/SmartThingsStuff/master/smartapps/craig-romei/Bathroom_Fan.jpg",
    iconX3Url: "https://raw.githubusercontent.com/napalmcsr/SmartThingsStuff/master/smartapps/craig-romei/Bathroom_Fan.jpg",
    importUrl: "https://raw.githubusercontent.com/napalmcsr/Hubitat_Napalmcsr/master/Apps/BathroomHumidityFan/BathroomHumidityChild.src")

preferences {
    page(name: "mainPage")
    page(name: "timeIntervalInput", title: "Only during a certain time") {
		section {
			input "starting", "time", title: "Starting", required: false
			input "ending", "time", title: "Ending", required: false
       }
    }
}

// Application settings and startup
def installed() {
    ifTrace("installed")
    state.paused = false
    state.disabled = false
    state.pausedOrDisabled = false
    initialize()
    state.installed = true
}

def updated() {
    ifTrace("updated")
    unsubscribe()
    unschedule()
    initialize()
    updateLabel()
}

def initialize() {
    ifTrace("initialize")
    ifDebug("Settings: ${settings}")
    subscribe(FanSwitch, "switch", FanSwitchHandler)
    subscribe(disabledSwitch, "switch", disabledHandler)
    subscribe(deviceActivationSwitch, "switch", deviceActivationSwitchHandler)
    state.OverThreshold = false
    state.AutomaticallyTurnedOn = false
    state.TurnOffLaterStarted = false
    subscribe(HumiditySensor, "humidity", HumidityHandler)
    subscribe(FanSwitch, "switch", FanSwitchHandler)
    subscribe(location, "mode", modeChangeHandler)
	compareHumidity()
    checkPausedOrDisabled()
    updateLabel()
}

def mainPage() {
    ifTrace("mainPage")
    if (!isDebug) {
        app.updateSetting("isDebug", false)
    }
    if (isTrace == true) {
        runIn(1800, traceOff)
    }
    if (isDebug == true) {
        runIn(1800, debugOff)
    }
    if (isTrace == true) {
        runIn(1800, traceOff)
    }

    dynamicPage(name: "mainPage", install: true, uninstall: true) {
        ifDebug("mainPage: [state.status = ${state?.status}] [state.paused = ${state?.paused}] [state.disabled = ${state.disabled}]")
        if (state?.disabled == "Disabled") {
            state.pauseButtonName = "Enable"
            unsubscribe()
            unschedule()
            subscribe(disabledSwitch, "switch", disabledHandler)
        } else if (state.paused == true) {
            state.pauseButtonName = "Resume"
            unsubscribe()
            unschedule()
            subscribe(disabledSwitch, "switch", disabledHandler)
        } else {
            state.pauseButtonName = "Pause"
            initialize()
        }
    section("") {
      input name: "Pause", type: "button", title: state.pauseButtonName, submitOnChange:true
    }
    section("") {
    String defaultName = "Enter a name for this child app"
        if (state.displayName) {
            defaultName = state.displayName
            app.updateLabel(defaultName)
        }
    label title: "Enter a name for this child app", required:false, defaultValue: defaultName, submitOnChange:true
    }
	   	section("") {
			input "HumiditySensor", "capability.relativeHumidityMeasurement", title: "Humidity Sensor:", required: true
			paragraph "NOTE: The humidity sensor you select will need to report about 5 min or less."
           	input "FanSwitch", "capability.switch", title: "Fan Location:", required: true
            input "CompareHumiditySensor", "capability.relativeHumidityMeasurement", title: "Compare to this baseline Humidity Sensor:", required: false
		}
		section("Fan Activation"){
			input "HumidityIncreaseRate", "number", title: "Humidity Increase Rate :", required: true, defaultValue: 2
			input "HumidityThreshold", "number", title: "Humidity Threshold (%):", required: false, defaultValue: 65
			input "FanOnDelay", "number", title: "Delay turning fan on (Minutes):", required: false, defaultValue: 0
		}
		section("Fan Deactivation") {
			input "HumidityDropTimeout", "number", title: "How long after the humidity starts to drop should the fan turn off (minutes):", required: true, defaultValue:  10
			input "HumidityDropLimit", "number", title: "What percentage above the starting humidity before triggering the turn off delay:", required: true, defaultValue:  25
            input "MaxRunTime", "number", title: "Maximum time(minutes) for Fan to run when automatically turned on:", required: false, defaultValue: 120
            input "HumidityIncreasedBy", "number", title: "When humidity rises above or equal to this amount plus the baseline sensor humidity turn on the fan: ", required: false, defaultValue: 9
		}
		section("Manual Activation") {
			input "ManualControlMode", "enum", title: "When should the fan turn off when turned on manually?", required: true, options: ["Manually", "By Humidity", "After Set Time"], defaultValue: "After Set Time"
			input "ManualOffMinutes", "number", title: "How many minutes until the fan is auto-turned-off?", required: false, defaultValue: 20
		}
        section(title: "Additional Features:", hideable: true, hidden: hideOptionsSection()) {
		    input "deviceActivationSwitch", "capability.switch", title: "Switches to turn on and off the fan immediately.", submitOnChange:false, required:false, multiple:true
        }
        section("Logging") { 
            input "isInfo", "bool", title: "Enable Info logging for 30 minutes", submitOnChange: true, defaultValue: false
            input "isDebug", "bool", title: "Enable debug logging for 30 minutes", submitOnChange: true, defaultValue: false
		    input "isTrace", "bool", title: "Enable Trace logging for 30 minutes", submitOnChange: true, defaultValue: false
            input "ifLevel","enum", title: "IDE logging level",required: true, options: getLogLevels(), defaultValue : "1"
            paragraph "NOTE: IDE logging level overrides the temporary logging selections."
		}
        section(title: "Only Run When:", hideable: true, hidden: hideOptionsSection()) {
		    def timeLabel = timeIntervalLabel()
		    href "timeIntervalInput", title: "Only during a certain time", description: timeLabel ?: "Tap to set", state: timeLabel ? "complete" : null
		    input "days", "enum", title: "Only on certain days of the week", multiple: true, required: false,
		    options: ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
		    input "modes", "mode", title: "Only when mode is", multiple: true, required: false
            input "disabledSwitch", "capability.switch", title: "Switch to Enable and Disable this app.", submitOnChange:true, required:false, multiple:true
            paragraph "NOTE: The disabled switch can be overridden until the next time this switch is toggled by clicking the Enable button at the top of the page."
        }
	}
}


// Device Handlers
def modeChangeHandler(evt) {
	ifTrace("modeChangeHandler")
        checkPausedOrDisabled()
        if (state?.pausedOrDisabled == false) {
            def allModes = settings.modes
        if(allModes) {
		    if(!allModes.contains(location.mode)) {
			    ifDebug("modeChangeHandler: Entered a disable mode, turning off the Fan")
			    TurnOffFanSwitch()
		    }
	    } else {	
            ifDebug("modeChangeHandler: Entered a disable mode, turning off the Fan")
		    TurnOffFanSwitch()
        }
    }
}

def HumidityHandler(evt) {
	ifInfo("HumidityHandler:running humidity check")
	def allModes = settings.modes
	def modeStop = false
	ifDebug("HumidityHandler: state.OverThreshold = ${state.OverThreshold}")
	ifDebug("HumidityHandler: state.AutomaticallyTurnedOn = ${state.AutomaticallyTurnedOn}")
	ifDebug("HumidityHandler: state.TurnOffLaterStarted = ${state.TurnOffLaterStarted}")
	ifDebug("HumidityHandler: Before")
	ifDebug("HumidityHandler: state.lastHumidity = ${state.lastHumidity}")
	ifDebug("HumidityHandler: state.lastHumidityDate = ${state.lastHumidityDate}")
	ifDebug("HumidityHandler: state.currentHumidity = ${state.currentHumidity}")
	ifDebug("HumidityHandler: state.currentHumidityDate = ${state.currentHumidityDate}")
	ifDebug("HumidityHandler: state.StartingHumidity = ${state.StartingHumidity}")
	ifDebug("HumidityHandler: state.HighestHumidity = ${state.HighestHumidity}")
	ifDebug("HumidityHandler: state.HumidityChangeRate = ${state.HumidityChangeRate}")
	ifDebug("HumidityHandler: state.targetHumidity = ${state.targetHumidity}")
	state.OverThreshold = CheckThreshold(evt)
	state.lastHumidityDate = state.currentHumidityDate
	if (state.currentHumidity) {
		state.lastHumidity = state.currentHumidity
	} else {
		state.lastHumidity = 100
	}
	if (!state.StartingHumidity) {
		state.StartingHumidity = 100
	}
	if (!state.HighestHumidity)	{
		state.HighestHumidity = 100
	}
	state.currentHumidity = Double.parseDouble(evt.value.replace("%", ""))
	state.currentHumidityDate = evt.date.time
	state.HumidityChangeRate = state.currentHumidity - state.lastHumidity
	if (state.currentHumidity>state.HighestHumidity)	{
		state.HighestHumidity = state.currentHumidity
	}
	state.targetHumidity = state.StartingHumidity+HumidityDropLimit/100*(state.HighestHumidity-state.StartingHumidity)              
	ifDebug("HumidityHandler: After")
	ifDebug("HumidityHandler: state.lastHumidity = ${state.lastHumidity}")
	ifDebug("HumidityHandler: state.lastHumidityDate = ${state.lastHumidityDate}")
	ifDebug("HumidityHandler: state.currentHumidity = ${state.currentHumidity}")
	ifDebug("HumidityHandler: state.currentHumidityDate = ${state.currentHumidityDate}")
	ifDebug("HumidityHandler: state.StartingHumidity = ${state.StartingHumidity}")
	ifDebug("HumidityHandler: state.HighestHumidity = ${state.HighestHumidity}")
	ifDebug("HumidityHandler: state.HumidityChangeRate = ${state.HumidityChangeRate.round(2)}")
	ifDebug("HumidityHandler: state.targetHumidity = ${state.targetHumidity}")
	ifDebug("HumidityHandler: FanSwitch.current state = ${FanSwitch.currentValue("switch")}")
	//if the humidity is high (or rising fast) and the fan is off, kick on the fan
	if (allModes) {
		if (allModes.contains(location.mode)) {
			modeStop = true
		}
	}
	ifDebug("HumidityHandler: modeStop.current state = ${modeStop}")
    if (((state.HumidityChangeRate>HumidityIncreaseRate)||state.OverThreshold) && (FanSwitch.currentValue("switch") == "off")&&!modeStop&&!state.AutomaticallyTurnedOn) {
		state.AutomaticallyTurnedOn = true
		state.TurnOffLaterStarted = false
		ifInfo("HumidityHandler:Turn On Fan due to humidity increase")
        if ((FanOnDelay>0)&&(FanOnDelay!=null)) {
            ifDebug("HumidityHandler:Turn On Fan later")
            runIn(60 * FanOnDelay.toInteger(), TurnOnFan)
        } else {
		    TurnOnFan()
        }
        state.StartingHumidity = state.lastHumidity
        state.HighestHumidity = state.currentHumidity    
		ifDebug("HumidityHandler: new state.StartingHumidity = ${state.StartingHumidity}")
		ifDebug("HumidityHandler: new state.HighestHumidity = ${state.HighestHumidity}")
		ifDebug("HumidityHandler: new state.targetHumidity = ${state.targetHumidity}")
	}
	//turn off the fan when humidity returns to normal and it was kicked on by the humidity sensor
	else if((state.AutomaticallyTurnedOn || ManualControlMode == "By Humidity")&& !state.TurnOffLaterStarted) {    
        if(state.currentHumidity<=state.targetHumidity) {
            if (HumidityDropTimeout == 0) {
                ifDebug("HumidityHandler:Fan Off")
                TurnOffFanSwitch()
            } else {
				ifInfo ("HumidityHandler:Turn Fan off in ${HumidityDropTimeout} minutes.")
				state.TurnOffLaterStarted = true
				runIn(60 * HumidityDropTimeout.toInteger(), TurnOffFanSwitchCheckHumidity)
				ifDebug("HumidityHandler: state.TurnOffLaterStarted = ${state.TurnOffLaterStarted}")
			}
		}
	}
}

def FanSwitchHandler(evt) {
    ifTrace("FanSwitchHandler")
    checkPausedOrDisabled()
    if (state.pausedOrDisabled == false) {
        if (evt.value == "on") {
            if (!state.AutomaticallyTurnedOn && (ManualControlMode == "After Set Time") && ManualOffMinutes) {
	            if (ManualOffMinutes == 0) {
                    ifDebug("FanSwitchHandler: Turning the Fan off now")
                    TurnOffFanSwitch()
			    } else {
                    ifDebug("FanSwitchHandler: Will turn off later")
                    runIn(60 * ManualOffMinutes.toInteger(), TurnOffFanSwitch)
                    state.status = "(On)"
                }
            }    
        } else if (evt.value == "off") {
                ifDebug("FanSwitchHandler: Switch turned off")
                state.status = "(Off)"
                state.AutomaticallyTurnedOn = false
                state.TurnOffLaterStarted = false
                unschedule()
        }
    }
    updateLabel()
}

def disabledHandler(evt) {
    ifTrace("disabledHandler")
    if (disabledSwitch) {
        disabledSwitch.each { it ->
        disabledSwitchState = it.currentValue("switch")
            if (disabledSwitchState == "on") {
                ifTrace("disabledHandler: disabledSwitchState = ${disabledSwitchState}")
				state.disabled = ""
                if (state?.paused) {
                    state.status = "(Paused)"
                    updateLabel()
                } else {
                    state.status = "${fanStatus()}"
                    updateLabel()
                }
            } else if (disabledSwitchState == "off") {
                state.pauseButtonName = "Enable"
                state.status = "(Disabled)"
                state.disabled = "Disabled"
                updateLabel()
                ifTrace("disabledHandler: Disabled")
            }
        }
    } else {
        state.disabledSwitchState = false
        state.disabledSwitch = false
        state.disabled = false
        if (!state?.paused) {
            state.status = "${fanStatus()}"
            updateLabel()
        }
    }
}

def deviceActivationSwitchHandler(evt) {
    ifTrace("deviceActivationSwitchHandler")
    ifTrace("DeviceActivationSwitchHandler: state.status = ${state.status} [state.paused = ${state.paused}] [state.disabled = ${state.disabled}]")
    checkPausedOrDisabled()
    if (state?.pausedOrDisabled == false) {
        if(deviceActivationSwitch) {
            deviceActivationSwitch.each { it ->
                deviceActivationSwitchState = it.currentValue("switch")
            }
                if (deviceActivationSwitchState == "on") {
                    ifDebug("deviceActivationSwitchHandler: Turning the Fan on now")
                    TurnOnFan()
                    state.AutomaticallyTurnedOn = false
                } else if (deviceActivationSwitchState == "off") {
                    ifDebug("deviceActivationSwitchHandler: Turning the Fan off now")
                    TurnOffFanSwitch()
                    state.TurnOffLaterStarted = false
                    unschedule()
                    updateLabel()
                }
        }
    } else {
        If (state?.pausedOrDisabled == true) {
           ifDebug("deviceActivationSwitchHandler: Application is paused or disabled.")
        }
    }
}
    
//Label Updates
void updateLabel() {
    ifTrace("updateLabel")
    ifTrace("updateLabel: fanStatus() = ${fanStatus()}")
        if (!app.label?.contains("<span") && !app.label?.contains("Paused") && !app.label?.contains("Disabled")) {
        state.displayName = app.label
    }
    ifTrace("updateLabel: [state.status = ${state?.status}] [state.paused = ${state?.paused}] [state.disabled = ${state?.disabled}]")
    if (state?.status || state?.paused || state?.disabled) {
        String label = "${state.displayName} "
        if (state?.disabled == "Disabled") {
            ifTrace("updateLabel: Setting to Disabled")
            state.pauseButtonName = "Enable"
            state.status = "(Disabled)"
            label += "<span style=color:red>(Disabled)</span>"
            app.updateLabel(label)
            ifDebug("updateLabel: Label set to ${label}")
        } else if (state?.paused) {
            ifTrace("updateLabel: Setting to Paused")
            state.pauseButtonName = "Resume"
            state.status = "(Paused)"
            label += "<span style=color:red>(Paused)</span>"
            app.updateLabel(label)
            ifDebug("updateLabel: Label set to ${label}")
        } else if (state?.status == "(On)") {
            ifTrace("updateLabel: Setting to On")
            state.status = "(On)"
            label += "<span style=color:green>(On)</span>"
            app.updateLabel(label)
            ifDebug("updateLabel: Label set to ${label}")
        } else if (state?.status == "(Off)") {
            ifTrace("updateLabel: Setting to Off")
            state.status = "(Off)"
            label += "<span style=color:blue>(Off)</span>"
            app.updateLabel(label)
            ifDebug("updateLabel: Label set to ${label}")
        } else {
            ifTrace("updateLabel: Setting to Unknown")
            state.status = "(Unknown)"
            label += "<span style=color:orange>(Unknown)</span>"
            app.updateLabel(label)
            ifDebug("updateLabel: Unknown Label set to ${label}")
        }
    }
}

//Enable, Resume, Pause button
def appButtonHandler(btn) {
    ifTrace("appButtonHandler")
    ifTrace("appButtonHandler: [state.status = ${state?.status}] [state.paused = ${state?.paused}] [state.disabled = ${state?.disabled}]")
    if (btn == "Enable") {
        ifTrace("appButtonHandler - Enable button before updateLabel: [state.status = ${state?.status}] [state.paused = ${state?.paused}] [state.disabled = ${state?.disabled}]")
        updateLabel()
        ifTrace("appButtonHandler - Enable button after updateLabel: [state.status = ${state?.status}] [state.paused = ${state?.paused}] [state.disabled = ${state?.disabled}]")
    } else if (btn == "Resume") {
        state.disabled = false
        state.paused = false
        state.status = ""
        ifTrace("appButtonHandler - Resume button before updateLabel: [state.status = ${state?.status}] [state.paused = ${state?.paused}] [state.disabled = ${state?.disabled}]")
        updateLabel()
        ifTrace("appButtonHandler - Resume after updateLabel: [state.status = ${state?.status}] [state.paused = ${state?.paused}] [state.disabled = ${state?.disabled}]")
    } else if (btn == "Pause") {
        state.disabled = false
        state.paused = !state.paused
        if (state.paused) {
            unschedule()
            unsubscribe()
            ifTrace("appButtonHandler - Pause button before updateLabel: [state.status = ${state?.status}] [state.paused = ${state.paused}] [state.disabled = ${state.disabled}]")
            updateLabel()
            ifTrace("appButtonHandler - Pause after updateLabel: [state.status = ${state?.status}] [state.paused = ${state.paused}] [state.disabled = ${state.disabled}]")
        } else {
            initialize()
            ifTrace("appButtonHandler: [state.status = ${state?.status}] [state.paused = ${state?.paused}] [state.disabled = ${state?.disabled}]")
            updateLabel()
            ifTrace("appButtonHandler: [state.status = ${state?.status}] [state.paused = ${state?.paused}] [state.disabled = ${state?.disabled}]")
        }
    }
}

// Application Page settings
private hideOptionsSection() {
    ifTrace("hideOptionsSection")
	(starting || ending || days || modes || manualCount) ? false : true
}

private getAllOk() {
    ifTrace("getAllOk")
	modeOk && daysOk && timeOk
}

private getModeOk() {
    ifTrace("getModeOk")
	def result = !modes || modes.contains(location.mode)
    ifDebug("modeOk = ${result}")
	result
}

private getDaysOk() {
    ifTrace("getDaysOk")
	def result = true
	if (days) {
		def df = new java.text.SimpleDateFormat("EEEE")
		if (location.timeZone) {
			df.setTimeZone(location.timeZone)
		}
		else {
			df.setTimeZone(TimeZone.getTimeZone("America/New_York"))
		}
		def day = df.format(new Date())
		result = days.contains(day)
	}
    ifDebug("daysOk = ${result}")
	result
}

private getTimeOk() {
    ifTrace("getTimeOk")
	def result = true
	if (starting && ending) {
		def currTime = now()
		def start = timeToday(starting).time
		def stop = timeToday(ending).time
		result = start < stop ? currTime >= start && currTime <= stop : currTime <= stop || currTime >= start
	}
    ifDebug{"timeOk = ${result}"}
	result
}

private hhmm(time, fmt = "h:mm a") {
    ifTrace("hhmm")
	def t = timeToday(time, location.timeZone)
	def f = new java.text.SimpleDateFormat(fmt)
	f.setTimeZone(location.timeZone ?: timeZone(time))
	f.format(t)
}
    
private timeIntervalLabel() {
    ifTrace("timeIntervalLabel")
	(starting && ending) ? hhmm(starting) + "-" + hhmm(ending, "h:mm a z") : ""
}


// Application functions
def fanStatus() {
    ifTrace("fanStatus")
    ifTrace("fanStatus: [state.status = ${state?.status}] [state.paused = ${state?.paused}] [state.disabled = ${state?.disabled}]")
    ifTrace("fanStatus: [FanSwitch?.currentValue(switch) = ${FanSwitch?.currentValue("switch")}]")
    if (FanSwitch?.currentValue("switch") == "on") {
        ifTrace("fanStatus - FanSwitch?.CurrentValue on: [state.paused = ${state?.paused}] [state.disabled = ${state?.disabled}] [state.disabled = ${state?.disabled == ""}])")
        if ((state?.paused == false) && ((state?.disabled == false) || (state?.disabled == ""))) {
            ifTrace("fanStatus: [state.paused = ${state?.paused}] [state.disabled = ${state?.disabled}] [state.disabled = ${state?.disabled == ""}])")
            state.status = "(On)"
            ifDebug("fanStatus - On: state.status = ${state?.status}")
            if (state.status == "(On)") return "(On)"
        } else if ((state?.paused == true) || (state?.disabled == true)) {
            log.info "${app.label}"
            ifTrace("fanStatus - FanSwitch?.CurrentValue on: [state.paused = ${state?.paused}] [state.disabled = ${state?.disabled}]")
        }
    }
    if (FanSwitch?.currentValue("switch") == "off") {
        ifTrace("fanStatus - FanSwitch?.CurrentValue off: [state.paused = ${state?.paused}] [state.disabled = ${state?.disabled}] [state.disabled = ${state?.disabled == false}]")
        if ((state?.paused == false) && (state?.disabled == false)) {
           state.status = "(Off)"
           ifDebug("fanStatus - Off: state.status = ${state.status}")
           if (state.status == "(Off)") return "(Off)"
        } else if ((state?.paused == true) || (state?.disabled == true)) {
           log.info "${app.label}"
           ifTrace("fanStatus - FanSwitch.CurrentValue off: [state.paused = ${state?.paused}] [state.disabled = ${state?.disabled}]")
        }
    }
}

def TurnOffFanSwitchMaxTime() {
    ifTrace("TurnOffFanSwitchMaxTime")
    checkPausedOrDisabled()
    if (state?.pausedOrDisabled == false) {
	    TurnOffFanSwitch()
    }
}

def TurnOffFanSwitchCheckHumidity() {
    ifTrace("TurnOffFanSwitchCheckHumidity")
    checkPausedOrDisabled()
    if (state.pausedOrDisabled == false) {
        if (FanSwitch?.currentValue("switch") == "on") {
            if(state?.currentHumidity > state.targetHumidity) {
                ifDebug("TurnOffFanSwitchCheckHumidity: Didn't turn off fan because humidity rate is ${state.HumidityChangeRate}")
                state.AutomaticallyTurnedOn = true
                state.TurnOffLaterStarted = false
            }
		} else {
			TurnOffFanSwitch()
		}
	}
}

def TurnOffFanSwitch() {
    ifTrace("TurnOffFanSwitch")
    checkPausedOrDisabled()
    if (state?.pausedOrDisabled == false) {
        if (FanSwitch?.currentValue("switch") == "on") {
            ifInfo("TurnOffFanSwitch: Turning the Fan off now")
            FanSwitch.off()
            state.status = "(Off)"
            updateLabel()
            state.AutomaticallyTurnedOn = false
            state.TurnOffLaterStarted = false
        }
    }
}

def TurnOffFanSwitchManual() {
    ifTrace("TurnOffFanSwitchManual")
    checkPausedOrDisabled()
    if (state?.pausedOrDisabled == false) {
        if ((FanSwitch?.currentValue("switch") == "on") && (state.AutomaticallyTurnedOn == false)) {
            ifInfo("TurnOffFanSwitchManual: Turning the Fan off now")
            FanSwitch.off()
            state.status = "(Off)"
            updateLabel()
            state.AutomaticallyTurnedOn = false
            state.TurnOffLaterStarted = false
        } else {
            ifInfo("Not turning off switch, either the switch was off or the Auto routine kicked in")
        }
    }
}

def TurnOnFan() {
    ifTrace("TurnOnFan")
    checkPausedOrDisabled()
    if (state?.pausedOrDisabled == false) {
        FanSwitch.on()
        state.status = "(On)"
        updateLabel()
        if (MaxRunTime) {
            ifDebug("Maximum run time is ${MaxRunTime} minutes")
            runIn(60 * MaxRunTime.toInteger(), TurnOffFanSwitchMaxTime)
        }
    }
}
                  
def CheckThreshold(evt) {
	ifTrace("CheckThreshold")
    double lastevtvalue = Double.parseDouble(evt.value.replace("%", ""))
    if (lastevtvalue >= HumidityThreshold) {  
		ifInfo("IsHumidityPresent: Humidity is above the Threashold")
		return true
    } else {
		return false
	}
}

def compareHumidity() {
    ifTrace("compareHumidity")
    if (CompareHumiditySensor == null) {
      myHumid = state.targetHumidity
    } else {
        if (!state?.baselineHumidity) { 
          subscribe(CompareHumiditySensor, "humidity", HumidityHandler)
          myHumid = CompareHumiditySensor.currentState("humidity")
          ifDebug("${CompareHumiditySensor} currently: ${myHumid.value}")
          state.baselineHumidity = myHumid.value
        }
    }
}

def checkDisabled() {
    ifTrace("checkDisabled")
    if (state?.disabledSwitchState == true) {
        if (disabledSwitchState == "Enabled") {
            state.disabled = false
            state.status = "${fanStatus()}"
        }
        if (disabledSwitchState == "Disabled") {
            state.disabled = "Disabled"
            state.status = "(Disabled)"
        }
    } else if (!disabledSwitchState) {
        state.disabled = false
        state.status = "${fanStatus()}"
    } else {
    state.disabled = false
    state.status = "${fanStatus()}"
    }
fanStatus()
}

def checkPausedOrDisabled() {
    ifTrace("checkPausedOrDisabled")
    if (state?.disabled || state?.paused) { state?.pausedOrDisabled = true } else { state?.pausedOrDisabled = false }
    ifTrace("checkPausedOrDisabled: [state.paused = ${state?.paused}] [state.disabled = ${state?.disabled}] [${state?.pausedOrDisabled}]")
}

def changeMode(mode) {
    ifTrace("changeMode")
    ifDebug("Changing Mode to: ${mode}")
	if (location?.mode != mode && location.modes?.find { it.name == mode}) setLocationMode(mode)
}

// Logging functions
def getLogLevels() {
    return [["0":"None"],["1":"Info"],["2":"Debug"],["3":"Trace"]]
}

def infoOff() {
    app.updateSetting("isInfo", false)
    log.info "${state.displayName}: Info logging auto disabled."
}

def debugOff() {
    app.updateSetting("isDebug", false)
    log.info "${state.displayName}: Debug logging auto disabled."
}

def traceOff() {
    app.updateSetting("isTrace", false)
    log.trace "${state.displayName}: Trace logging auto disabled."
}

def disableInfoIn30() {
    if (isInfo == true) {
        runIn(1800, infoOff)
        log.info "Info logging disabling in 30 minutes."
    }
}

def disableDebugIn30() {
    if (isDebug == true) {
        runIn(1800, debugOff)
        log.debug "Debug logging disabling in 30 minutes."
    }
}

def disableTraceIn30() {
    if (isTrace == true) {
        runIn(1800, traceOff)
        log.trace "Trace logging disabling in 30 minutes."
    }
}

def ifWarn(msg) {
    log.warn "${state.displayName}: ${msg}"
}

def ifInfo(msg) {       
    def logL = 0
    if (ifLevel) logL = ifLevel.toInteger()
    if (logL == 1 && isInfo == false) {return}//bail
    else if (logL > 0) {
		log.info "${state?.displayName}: ${msg}"
	}
}

def ifDebug(msg) {
    def logL = 0
    if (ifLevel) logL = ifLevel.toInteger()
    if (logL < 2 && isDebug == false) {return}//bail
    else if (logL > 1) {
		log.debug "${state?.displayName}: ${msg}"
    }
}

def ifTrace(msg) {       
    def logL = 0
    if (ifLevel) logL = ifLevel.toInteger()
    if (logL < 3 && isTrace == false) {return}//bail
    else if (logL > 2) {
		log.trace "${state?.displayName}: ${msg}"
    }
}
