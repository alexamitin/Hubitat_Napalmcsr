/**
*  Smart Humidity Fan
*
*  Turns on a fan when you start taking a shower... turns it back off when you are done.
*    -Uses humidity change rate for rapid response
*    -Timeout option when manaully controled (for stench mitigation)
*    -Child/Parent with pause/resume (Thanks to Lewis.Heidrick!)
*
*  Copyright 2018 Craig Romei
*  GNU General Public License v2 (https://www.gnu.org/licenses/gpl-2.0.txt)
*
*/

def setVersion() {
    state.version = "1.1.1" // Version number of this app
    state.InternalName = "BathroomHumidityFan"   // this is the name used in the JSON file for this app
}

definition(
    name: "Bathroom Humidity Fan Child",
    namespace: "Craig.Romei",
    author: "Craig Romei",
    description: "Control a fan (switch) based on relative humidity.",
    category: "Convenience",
    parent: "Craig.Romei:Bathroom Humidity Fan",
    iconUrl: "",
    iconX2Url: "",
    iconX3Url: "",
    importUrl: "https://raw.githubusercontent.com/napalmcsr/Hubitat_Napalmcsr/master/Apps/BathroomHumidityFan/BathroomHumidityChild.src")

preferences {
    page(name: "mainPage")
    page(name: "timeIntervalInput", title: "Only during a certain time") {
		section {
			input "starting", "time", title: "Starting", required: false
			input "ending", "time", title: "Ending", required: false
       }
    }
}

// Application settings and startup
def installed() {
    ifTrace("installed")
    state.installed = true
    initialize()
}

def updated() {
    ifDebug("Bathroom Humidity Fan Updated")
    unsubscribe()
    unschedule()
    subscribe(disabledSwitch, "switch", disabledHandler)
    subscribe(deviceActivationSwitch, "switch", deviceActivationSwitchHandler)
    compareHumidity()
    updateLabel()
    getAllOk()
}

def initialize() {
    ifTrace("initialize")
    ifDebug("Settings: ${settings}")
    defaultHumidityThresholdValue = 65
    subscribe(FanSwitch, "switch", FanSwitchHandler)
    subscribe(disabledSwitch, "switch", disabledHandler)
    subscribe(deviceActivationSwitch, "switch", deviceActivationSwitchHandler)
    state.OverThreshold = false
    state.AutomaticallyTurnedOn = false
    state.TurnOffLaterStarted = false
    subscribe(HumiditySensor, "humidity", HumidityHandler)
    subscribe(FanSwitch, "switch", FanSwitchHandler)
    subscribe(location, "mode", modeChangeHandler)
	subscribe(CompareHumiditySensor, "humidity", compareHumidityHandler)
    subscribe(FanSwitch, "switch", diagnosticHandler)
    subscribe(HumiditySensor, "humidity", diagnosticHandler)
    subscribe(CompareHumiditySensor, "humidity", diagnosticHandler)
    updateLabel()
    getAllOk()
}

def mainPage() {
    ifTrace("mainPage")
    if (!isDebug) {
        app.updateSetting("isDebug", false)
    }
    if (isTrace == true) {
        runIn(1800, traceOff)
    }
    if (isDebug == true) {
        runIn(1800, debugOff)
    }
    if (isTrace == true) {
        runIn(1800, traceOff)
    }
    
    dynamicPage(name: "mainPage", install: true, uninstall: true) {
        defalultName = "Enter a name for this child app"
        diagnosticHandler()
        if (state?.disabled == true) {
            state.pauseButtonName = "Disabled by Switch"
            unsubscribe()
            unschedule()
            subscribe(disabledSwitch, "switch", disabledHandler)
            updateLabel()
        } else if (state.paused == true) {
            state.pauseButtonName = "Resume"
            unsubscribe()
            unschedule()
            subscribe(disabledSwitch, "switch", disabledHandler)
            updateLabel()
        } else {
            state.pauseButtonName = "Pause"
            initialize()
            updateLabel()
        }
    section("") {
      input name: "Pause", type: "button", title: state.pauseButtonName, submitOnChange:true
    }
    section("") {
        String defaultName = "Enter a name for this child app"
        updateLabel()
        if(state.newName != null) {defaultName = state.newName}
        label title: "Enter a name for this child app", required:false, defaultValue: defaultName, submitOnChange:true 
    }
	   	section("") {
            input "HumiditySensor", "capability.relativeHumidityMeasurement", title: "Humidity Sensor: ${humiditySensorStatus}", required: true
			paragraph "NOTE: The humidity sensor you select will need to report about 5 min or less."
            input "FanSwitch", "capability.switch", title: "Fan: ${fanSwitchStatus}", required: true
            input "CompareHumiditySensor", "capability.relativeHumidityMeasurement", title: "Compare to this baseline Humidity Sensor: ${compareHumiditySensorStatus}", required: false
            input "refresh", "bool", title: "Click here to refresh the device status", submitOnChange:true
            app.updateSetting("refresh",[value:"false",type:"bool"])
		}
		section("Fan Activation"){
            if (CompareHumiditySensor != null) {defaultHumidityThresholdValue = CompareHumiditySensor.currentValue("humidity")}
			input "HumidityIncreaseRate", "number", title: "Humidity Increase Rate :", required: true, defaultValue: 2
			input "HumidityThreshold", "number", title: "Humidity Threshold (%):", required: false, defaultValue: defaultHumidityThresholdValue
            input "HumidityIncreasedBy", "number", title: "When humidity rises above or equal to this amount plus the baseline sensor humidity turn on the fan: ", required: false, defaultValue: 9
			input "FanOnDelay", "number", title: "Delay turning fan on (Minutes):", required: false, defaultValue: 0
		}
		section("Fan Deactivation") {
			input "HumidityDropTimeout", "number", title: "How long after the humidity starts to drop should the fan turn off (minutes):", required: true, defaultValue:  10
			input "HumidityDropLimit", "number", title: "What percentage above the starting humidity before triggering the turn off delay:", required: true, defaultValue:  25
            input "MaxRunTime", "number", title: "Maximum time(minutes) for Fan to run when automatically turned on:", required: false, defaultValue: 120
		}
		section("Manual Activation") {
			input "ManualControlMode", "enum", title: "When should the fan turn off when turned on manually?", required: true, options: ["Manually", "By Humidity", "After Set Time"], defaultValue: "After Set Time"
			input "ManualOffMinutes", "number", title: "How many minutes until the fan is auto-turned-off?", required: false, defaultValue: 20
		}
        section(title: "Additional Features:", hideable: true, hidden: hideOptionsSection()) {
		    input "deviceActivationSwitch", "capability.switch", title: "Switches to turn on and off the fan immediately.", submitOnChange:false, required:false, multiple:true
        }
    section("Logging Options", hideable: true, hidden: hideLoggingSection()) {
            input "isInfo", "bool", title: "Enable Info logging for 30 minutes", submitOnChange: false, defaultValue: false
            input "isDebug", "bool", title: "Enable debug logging for 30 minutes", submitOnChange: false, defaultValue: false
		    input "isTrace", "bool", title: "Enable Trace logging for 30 minutes", submitOnChange: false, defaultValue: false
            input "ifLevel","enum", title: "IDE logging level",required: true, options: getLogLevels(), defaultValue : "1"
            paragraph "NOTE: IDE logging level overrides the temporary logging selections."
		}
        section(title: "Only Run When:", hideable: true, hidden: hideOptionsSection()) {
			def timeLabel = timeIntervalLabel()
			href "timeIntervalInput", title: "Only during a certain time", description: timeLabel ?: "Tap to set", state: timeLabel ? "complete" : null
			input "days", "enum", title: "Only on certain days of the week", multiple: true, required: false,
			    options: ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
			input "modes", "mode", title: "Only when mode is", multiple: true, required: false
            input "disabledSwitch", "capability.switch", title: "Switch to Enable and Disable this app", submitOnChange:true, required:false, multiple:true
        }
	}
}


// Device Handlers
def diagnosticHandler(evt) {
    ifTrace("diagnosticHandler")
    if (FanSwitch?.currentValue("switch") != null) {
        fanSwitchStatus = FanSwitch.currentValue("switch")
        ifTrace("diagnosticHandler: FanSwitch?.currentValue = ${FanSwitch?.currentValue("switch")}")
    } else if (FanSwitch?.lastValue("switch") != null) {
        fanSwitchStatus = FanSwitch.lastValue("switch")
        ifTrace("diagnosticHandler: FanSwtich.lastValue = ${FanSwitch.lastValue("switch")}")
    } else {
        fanSwitchStatus = " "
        ifTrace("diagnosticHandler: fanSwitchStatus = ${fanSwitchStatus}")
    }
    if (HumiditySensor?.currentValue("humidity") != null) {humiditySensorStatus = HumiditySensor.currentValue("humidity")
    } else if (HumiditySensorStatus?.lastValue("humidity") != null) {humiditySensorStatus = HumiditySensor.lastValue("humidity")
    } else {
        humiditySensorStatus = " "   
    }
    if (CompareHumiditySensor?.currentValue("humidity") != null) {compareHumiditySensorStatus = CompareHumiditySensor.currentValue("humidity")
    } else if (compareHumiditySensor?.lastValue("humidity") != null) {compareHumiditySensorStatus = CompareHumiditySensor.lastValue("humidity")
    } else {
        compareHumiditySensorStatus = " "   
    }
    updateLabel()
}

def modeChangeHandler(evt) {
	ifTrace("modeChangeHandler")
        updateLabel()
        if (state?.pausedOrDisabled == false) {
            def allModes = settings.modes
        if(allModes) {
		    if(!allModes.contains(location.mode)) {
			    ifDebug("modeChangeHandler: Entered a disable mode, turning off the Fan")
			    TurnOffFanSwitch()
		    }
	    } else {	
            ifDebug("modeChangeHandler: Entered a disable mode, turning off the Fan")
		    TurnOffFanSwitch()
        }
    }
}

def HumidityHandler(evt) {
	ifInfo("HumidityHandler:running humidity check")
    if (getAllOk() != true) {
        TurnOffFanSwitch()
        ifTrace("HumidityHandler: getAllOk = ${getAllOk}")
    } else {
        //Get Initial Variables
        HumidityHandlerVariablesBefore()
        ifTrace("HumidityHandler: Before state.OverThreshold = ${state.OverThreshold}")
        state.OverThreshold = CheckThreshold(evt)
        ifTrace("HumidityHandler: Before state.OverThreshold = ${state.OverThreshold}")
        state.lastHumidityDate = state.currentHumidityDate
	    if (state.currentHumidity) {
	        state.lastHumidity = state.currentHumidity
        } else {
	        state.lastHumidity = 100
        }
	    if (!state.StartingHumidity) {state.StartingHumidity = 100}
	    if (!state.HighestHumidity)	{state.HighestHumidity = 100}
	    state.currentHumidity = Double.parseDouble(evt.value.replace("%", ""))
	    state.currentHumidityDate = evt.date.time
	    state.HumidityChangeRate = (state.currentHumidity - state.lastHumidity)
	    if (state.currentHumidity > state.HighestHumidity) {state.HighestHumidity = state.currentHumidity}
	    state.targetHumidity = (state.StartingHumidity + ((HumidityDropLimit / 100) * (state.HighestHumidity - state.StartingHumidity)))
        //Get Variables After
        HumidityHandlerVariablesAfter()
	    //if the humidity is high (or rising fast) and the fan is off, kick on the fan
        if (((state?.HumidityChangeRate > HumidityIncreaseRate) || state?.OverThreshold) && (FanSwitch?.currentValue("switch") == "off") && !state?.AutomaticallyTurnedOn) {
		    ifTrace("HumidityHandler: (((state?.HumidityChangeRate > HumidityIncreaseRate)|| state?.OverThreshold) && (FanSwitch?.currentValue(switch) == off)&&!state?.AutomaticallyTurnedOn) TRUE")
            state.AutomaticallyTurnedOn = true
            ifTrace("state?.AutomaticallyTurnedOn = ${state.AutomaticallyTurnedOn}")
		    state.TurnOffLaterStarted = false
            ifTrace("state?.TurnOffLaterStarted = ${state.TurnOffLaterStarted}")
		    ifInfo("HumidityHandler:Turn On Fan due to humidity increase")
            if ((FanOnDelay > 0) && (FanOnDelay!=null)) {
                ifDebug("HumidityHandler: Turn On Fan later")
                runIn(60 * FanOnDelay.toInteger(), TurnOnFan)
            } else {
		        TurnOnFan()
                ifTrace("HumidityHandler: ((FanOnDelay>0)&&(FanOnDelay!=null)) not true Turning on fan.")
            }
            state.StartingHumidity = state.lastHumidity
            state.HighestHumidity = state.currentHumidity    
		    ifDebug("HumidityHandler: new state?.StartingHumidity = ${state.StartingHumidity}")
		    ifDebug("HumidityHandler: new state?.HighestHumidity = ${state.HighestHumidity}")
		    ifDebug("HumidityHandler: new state?.targetHumidity = ${state.targetHumidity}")
	        //turn off the fan when humidity returns to normal and it was kicked on by the humidity sensor
        } else if ((state?.AutomaticallyTurnedOn || ManualControlMode == "By Humidity") && !state?.TurnOffLaterStarted) {    
            if (state?.currentHumidity <= state?.targetHumidity) {
                if(FanSwitch?.currentValue("switch") == "on") {
                    if (HumidityDropTimeout == 0) {
                        ifDebug("HumidityHandler: Fan Off")
                        TurnOffFanSwitch()
                    } else {
				        ifInfo ("HumidityHandler: Turn Fan off in ${HumidityDropTimeout} minutes.")
				        state.TurnOffLaterStarted = true
				        runIn(60 * HumidityDropTimeout.toInteger(), TurnOffFanSwitchCheckHumidity)
				        ifDebug("HumidityHandler: state?.TurnOffLaterStarted = ${state?.TurnOffLaterStarted}")
                    }
			    }
		    }
	    }
    }
}

def FanSwitchHandler(evt) {
    ifTrace("FanSwitchHandler")
    if (getAllOk() != true) {
    } else {
    updateLabel()
    if (state?.pausedOrDisabled == false) {
        if (evt.value == "on") {
            if (!state?.AutomaticallyTurnedOn && (ManualControlMode == "After Set Time") && ManualOffMinutes) {
	            if (ManualOffMinutes == 0) {
                    ifDebug("FanSwitchHandler: Turning the Fan off now")
                    TurnOffFanSwitch()
			    } else {
                    ifDebug("FanSwitchHandler: Will turn off later")
                    runIn(60 * ManualOffMinutes.toInteger(), TurnOffFanSwitch)
                    state.status = "(On)"
                }
            }    
        } else if (evt.value == "off") {
                ifDebug("FanSwitchHandler: Switch turned off")
                state.status = "(Off)"
                state.AutomaticallyTurnedOn = false
                state.TurnOffLaterStarted = false
                unschedule()
        }
    }
    }
    updateLabel()
}

def CheckThreshold(evt) {
	ifTrace("CheckThreshold")
    double lastEvtValue = Double.parseDouble(evt.value.replace("%", ""))
    if (lastEvtValue >= HumidityThreshold) {  
		ifInfo("IsHumidityPresent: Humidity is above the Threshold")
	    return true
    } else {
        return false
    }
}

def compareHumidityHandler(evt) {
    state.compareHumidity = Double.parseDouble(evt.value.replace("%", ""))
    defaultHumidityThresholdValue = state.compareHumidity
    app.updateSetting("HumidityThreshold",[value:[defaultHumidityThresholdValue]])
    ifTrace("compareHumidityHandler: HumidityThreshold updated to ${defaultHumidityThresholdValue}")
}
    
def disabledHandler(evt) {
    ifTrace("disabledHandler")
    if (getAllOk() != true) {
        } else {
        if(disabledSwitch) {
            disabledSwitch.each { it ->
            disabledSwitchState = it.currentValue("switch")
                if (disabledSwitchState == "on") {
                    state.disabled = false
                    if (state?.paused == true) {
                        state.status = "(Paused)"
                        state.pausedOrDisabled = true
                    } else {
                        state.paused = false
                        state.disabled = false
                        state.pausedOrDisabled = false
                        if (FanSwitch?.currentValue("switch") == "off") {
                            ifDebug("disabledHandler: App was enabled or unpaused and fan was off.")
                        }
                    }
                } else if (disabledSwitchState == "off") {
                    state.pauseButtonName = "Disabled by Switch"
                    state.status = "(Disabled)"
                    state.disabled = true
                    updateLabel()
                }
            }
        }
        updateLabel()
    }
}

def deviceActivationSwitchHandler(evt) {
    ifTrace("deviceActivationSwitchHandler")
    if (getAllOk() != true) {
    } else {
        updateLabel()
        if (state?.pausedOrDisabled == false) {
            if(deviceActivationSwitch) {
                deviceActivationSwitch.each { it ->
                    deviceActivationSwitchState = it.currentValue("switch")
                }
                    if (deviceActivationSwitchState == "on") {
                        ifDebug("deviceActivationSwitchHandler: Turning on the fan now")
                        TurnOnFan()
                        state.status = "(On)"
                    } else if (deviceActivationSwitchState == "off") {
                        ifDebug("deviceActivationSwitchHandler: Turning off the fan now")
                        unlockDoor()
                        state.status = "(Off)"
                    }
            }
        } else {
            ifTrace("deviceActivationSwitchHandler: Application is paused or disabled.")
        }
        updateLabel()
    }
}

// Application functions
def HumidityHandlerVariablesBefore() {
    ifDebug("HumidityHandler: state?.baselineHumidity = ${state?.baselineHumidity}")
	ifDebug("HumidityHandler: state?.OverThreshold = ${state?.OverThreshold}")
	ifDebug("HumidityHandler: state?.AutomaticallyTurnedOn = ${state?.AutomaticallyTurnedOn}")
	ifDebug("HumidityHandler: state?.TurnOffLaterStarted = ${state?.TurnOffLaterStarted}")
	ifDebug("HumidityHandler: Before")
	ifDebug("HumidityHandler: state?.lastHumidity = ${state?.lastHumidity}")
	ifDebug("HumidityHandler: state?.lastHumidityDate = ${state?.lastHumidityDate}")
	ifDebug("HumidityHandler: state?.currentHumidity = ${state?.currentHumidity}")
	ifDebug("HumidityHandler: state?.currentHumidityDate = ${state?.currentHumidityDate}")
	ifDebug("HumidityHandler: state?.StartingHumidity = ${state?.StartingHumidity}")
	ifDebug("HumidityHandler: state?.HighestHumidity = ${state?.HighestHumidity}")
	ifDebug("HumidityHandler: state?.HumidityChangeRate = ${state?.HumidityChangeRate}")
	ifDebug("HumidityHandler: state?.targetHumidity = ${state?.targetHumidity}")
}

def HumidityHandlerVariablesAfter() {
    ifDebug("HumidityHandler: state?.OverThreshold = ${state?.OverThreshold}")
    ifDebug("HumidityHandler: After")
	ifDebug("HumidityHandler: state?.lastHumidity = ${state?.lastHumidity}")
	ifDebug("HumidityHandler: state?.lastHumidityDate = ${state?.lastHumidityDate}")
	ifDebug("HumidityHandler: state?.currentHumidity = ${state?.currentHumidity}")
	ifDebug("HumidityHandler: state?.currentHumidityDate = ${state?.currentHumidityDate}")
	ifDebug("HumidityHandler: state?.StartingHumidity = ${state?.StartingHumidity}")
	ifDebug("HumidityHandler: state?.HighestHumidity = ${state?.HighestHumidity}")
	ifDebug("HumidityHandler: state?.HumidityChangeRate = ${state?.HumidityChangeRate.round(2)}")
	ifDebug("HumidityHandler: state?.targetHumidity = ${state?.targetHumidity}")
	ifDebug("HumidityHandler: FanSwitch?.currentValue(switch) = ${FanSwitch?.currentValue("switch")}")
}

def TurnOffFanSwitchMaxTime() {
    ifTrace("TurnOffFanSwitchMaxTime")
    if (getAllOk() != true) {
    } else {
        updateLabel()
        if (state?.pausedOrDisabled == false) {
	        TurnOffFanSwitch()
        }
        updateLabel()
    }
}

def TurnOffFanSwitchCheckHumidity() {
    ifTrace("TurnOffFanSwitchCheckHumidity")
        if (getAllOk() != true) {
        } else {
            updateLabel()
        if (state?.pausedOrDisabled == false) {
            if (FanSwitch?.currentValue("switch") == "on") {
                if(state?.currentHumidity > state?.targetHumidity) {
                    ifDebug("TurnOffFanSwitchCheckHumidity: Didn't turn off fan because humidity rate is ${state?.HumidityChangeRate}")
                    state.AutomaticallyTurnedOn = true
                    state.TurnOffLaterStarted = false
                }
	        } else {
	            TurnOffFanSwitch()
	        }
        }
    updateLabel()
	}
}

def TurnOffFanSwitch() {
    ifTrace("TurnOffFanSwitch")
    if (getAllOk() != true) {
    } else {
        updateLabel()
        if (state?.pausedOrDisabled == false) {
            if (FanSwitch?.currentValue("switch") == "on") {
                ifInfo("TurnOffFanSwitch: Turning the Fan off now")
                FanSwitch.off()
                state.status = "(Off)"
                state.AutomaticallyTurnedOn = false
                state.TurnOffLaterStarted = false
            }
        }
    updateLabel()
    }
}

def TurnOffFanSwitchManual() {
    ifTrace("TurnOffFanSwitchManual")
    if (getAllOk() != true) {
    } else {
        updateLabel()
        if (state?.pausedOrDisabled == false) {
            if ((FanSwitch?.currentValue("switch") == "on") && (state?.AutomaticallyTurnedOn == false)) {
                ifInfo("TurnOffFanSwitchManual: Turning the Fan off now")
                FanSwitch.off()
                state.status = "(Off)"
                updateLabel()
                state.AutomaticallyTurnedOn = false
                state.TurnOffLaterStarted = false
            } else {
                ifInfo("Not turning off switch, either the switch was off or the Auto routine kicked in")
            }
        }
    updateLabel()
    }
}

def TurnOnFan() {
    ifTrace("TurnOnFan")
    if (getAllOk() != true) {
    } else {
        if (state?.pausedOrDisabled == false) {
            FanSwitch.on()
            state.status = "(On)"
            updateLabel()
            if (MaxRunTime) {
                ifDebug("Maximum run time is ${MaxRunTime} minutes")
                runIn(60 * MaxRunTime.toInteger(), TurnOffFanSwitchMaxTime)
            }
        }
    updateLabel()
    }
}
                  
def compareHumidity() {
    ifTrace("compareHumidity")
    if (CompareHumiditySensor == null) {
      compareHumid = HumidityThreshold
    } else {
        if (!state?.baselineHumidity) { 
          subscribe(CompareHumiditySensor, "humidity", compareHumidityHandler)
          state.currentHumidity = Double.parseDouble(evt.value.replace("%", ""))
          compareHumid = CompareHumiditySensor.currentState("humidity")
          ifDebug("CompareHumiditySensor currently: ${compareHumiditySensor.value}")
          state.baselineHumidity = compareHumid
        }
    }
}

def changeMode(mode) {
    ifTrace("changeMode")
    ifDebug("Changing Mode to: ${mode}")
	if (location?.mode != mode && location.modes?.find { it.name == mode}) setLocationMode(mode)
}

//Label Updates
void updateLabel() {
    if (getAllOk() != true) {
        ifTrace("updateLabel: getAllOk = ${getAllOk()}")
        String label = "${state.displayName} <span style=color:"
        state.status = "(Disabled by Time, Day, or Mode)"
        status = "(Disabled by Time, Day, or Mode)"
        label += "brown"
        label += ">${status}</span>"
        app.updateLabel(label)
        state.newName = label
        if(state?.newName != null) {defaultName = state.newName}
    } else {
        if ((state?.pause == true) || (state?.disabled == true)) {
            state.pausedOrDisabled = true
        } else {
            state.pausedOrDisabled = false
        }
        if (!app.label?.contains("<span") && !app.label?.contains("Paused") && !app.label?.contains("Disabled") && !app.label?.contains("On") && !app.label?.contains("Off") && !app.label?.contains("Unknown")) {
            state.displayName = app.label
        }
            String label = "${state.displayName} <span style=color:"
        if (state?.disabled == true) {
            state.status = "(Disabled)"
            status = "(Disabled)"
            label += "red"
        } else if (state?.paused == true) {
            state.status = "(Paused)"
            status = "(Paused)"
            label += "red"
        } else if (FanSwitch?.currentValue("switch") == "on") {
            state.status = "(On)"
            status = "(On)"
            label += "green"
        } else if (FanSwitch?.currentValue("switch") == "off") {
            state.status = "(Off)"
            status = "(Off)"
            label += "blue"
        } else {
            state.paused = false
            state.disabled = false
            state.pausedOrDisabled = false
            state.status = "(Unknown)"
            status = "(Unknown)"
            label += "pink"
            }

        label += ">${status}</span>"
        if (label == "null <span style=color:pink>(Unknown)</span>") {label = ""}
        app.updateLabel(label)
        state.newName = label
        if(state?.newName != null) {defaultName = state.newName}
    }
}

//Enable, Resume, Pause button
def appButtonHandler(btn) {
    ifTrace("appButtonHandler")
    if (btn == "Disabled by Switch") {
        state.disabled = false
    } else if (btn == "Resume") {
        state.disabled = false
        state.paused = !state.paused
    } else if (btn == "Pause") {
        state.paused = !state.paused
        if (state?.paused) {
            unschedule()
            unsubscribe()
        } else {
            initialize()
            state.pausedOrDisabled = false
            if (FanSwitch?.currentValue("switch") == "on") {
                ifTrace("appButtonHandler: App was enabled or unpaused and fan was on. Turning off the fan.")
                TurnOffFan()
            }
        }
    }
    updateLabel()
}

// Application Page settings
private hideLoggingSection() {
	(isInfo || isDebug || isTrace || ifLevel) ? true : true
}

private hideOptionsSection() {
	(starting || ending || days || modes || manualCount) ? true : true
}

def getAllOk() {
    if (modeOk && daysOk && timeOk) {
        return true
    } else {
        return false
    }
}

private getModeOk() {
	def result = (!modes || modes.contains(location.mode))
	result
}

private getDaysOk() {
	def result = true
	if (days) {
		def df = new java.text.SimpleDateFormat("EEEE")
		if (location.timeZone) {
			df.setTimeZone(location.timeZone)
		}
		else {
			df.setTimeZone(TimeZone.getTimeZone("America/New_York"))
		}
		def day = df.format(new Date())
		result = days.contains(day)
	}
	result
}

private getTimeOk() {
	def result = true
	if ((starting != null) && (ending != null)) {
		def currTime = now()
		def start = timeToday(starting).time
		def stop = timeToday(ending).time
		result = start < stop ? currTime >= start && currTime <= stop : currTime <= stop || currTime >= start
	}
	result
}

private hhmm(time, fmt = "h:mm a") {
	def t = timeToday(time, location.timeZone)
	def f = new java.text.SimpleDateFormat(fmt)
	f.setTimeZone(location.timeZone ?: timeZone(time))
	f.format(t)
}

private timeIntervalLabel() {
	(starting && ending) ? hhmm(starting) + "-" + hhmm(ending, "h:mm a z") : ""
}

// Logging functions
def getLogLevels() {
    return [["0":"None"],["1":"Info"],["2":"Debug"],["3":"Trace"]]
}

def infoOff() {
    app.updateSetting("isInfo", false)
    log.info "${state?.displayName}: Info logging disabled."
    app?.updateSetting("isInfo",[value:"false",type:"bool"])
}

def debugOff() {
    app.updateSetting("isDebug", false)
    log.info "${state?.displayName}: Debug logging disabled."
    app?.updateSetting("isDebug",[value:"false",type:"bool"])
}

def traceOff() {
    app.updateSetting("isTrace", false)
    log.trace "${state?.displayName}: Trace logging disabled."
    app?.updateSetting("isTrace",[value:"false",type:"bool"])
}

def disableInfoIn30() {
    if (isInfo == true) {
        runIn(1800, infoOff)
        log.info "Info logging disabling in 30 minutes."
    }
}

def disableDebugIn30() {
    if (isDebug == true) {
        runIn(1800, debugOff)
        log.debug "Debug logging disabling in 30 minutes."
    }
}

def disableTraceIn30() {
    if (isTrace == true) {
        runIn(1800, traceOff)
        log.trace "Trace logging disabling in 30 minutes."
    }
}

def ifWarn(msg) {
    log.warn "${state.displayName}: ${msg}"
}

def ifInfo(msg) {       
    def logL = 0
    if (ifLevel) logL = ifLevel.toInteger()
    if (logL == 1 && isInfo == false) {return}//bail
    else if (logL > 0) {
		log.info "${state.displayName}: ${msg}"
	}
}

def ifDebug(msg) {
    def logL = 0
    if (ifLevel) logL = ifLevel.toInteger()
    if (logL < 2 && isDebug == false) {return}//bail
    else if (logL > 1) {
		log.debug "${state.displayName}: ${msg}"
    }
}

def ifTrace(msg) {       
    def logL = 0
    if (ifLevel) logL = ifLevel.toInteger()
    if (logL < 3 && isTrace == false) {return}//bail
    else if (logL > 2) {
		log.trace "${state.displayName}: ${msg}"
    }
}
