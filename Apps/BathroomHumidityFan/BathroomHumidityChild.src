/**
*  Smart Humidity Fan
*
*  Turns on a fan when you start taking a shower... turns it back off when you are done.
*    -Uses humidity change rate for rapid response
*    -Timeout option when manaully controled (for stench mitigation)
*    -Child/Parent with pause/resume (Thanks to Lewis.Heidrick!)
*
*  Copyright 2018 Craig Romei
*  GNU General Public License v2 (https://www.gnu.org/licenses/gpl-2.0.txt)
*
*/

definition(
    name: "Bathroom Humidity Fan Child",
    namespace: "Craig.Romei",
    author: "Craig Romei",
    description: "Control a fan (switch) based on relative humidity.",
    category: "Convenience",
    parent: "Craig.Romei:Bathroom Humidity Fan",
    iconUrl: "https://raw.githubusercontent.com/napalmcsr/SmartThingsStuff/master/smartapps/craig-romei/Bathroom_Fan.jpg",
    iconX2Url: "https://raw.githubusercontent.com/napalmcsr/SmartThingsStuff/master/smartapps/craig-romei/Bathroom_Fan.jpg",
    iconX3Url: "https://raw.githubusercontent.com/napalmcsr/SmartThingsStuff/master/smartapps/craig-romei/Bathroom_Fan.jpg",
    importUrl: "https://raw.githubusercontent.com/napalmcsr/Hubitat_Napalmcsr/master/Apps/BathroomHumidityFan/BathroomHumidityChild.src")

preferences {
    page(name: "mainPage")
}

def appButtonHandler(btn)
{
  if (btn == "pause") {
    state.paused = !state.paused
    if (state.paused) {
      unschedule()
      unsubscribe()
      updateLabel()
    } else {
      initialize()
      updateLabel()
    }
  }
}

def mainPage()
{
  if (!debugLog) {
      app.updateSetting("debugLog", false)
	}
  logDebug("mainPage")
  if (debugLog == true) {
      runIn(1800, debugOff)
  }
  section() {
  }
    dynamicPage(name: "mainPage", install: true, uninstall: true) {
    if (state.paused) {
      state.pauseButtonName = "Resume"
      state.status = "Paused"
        if (state.installed){
          updateLabel()
        }
    } else {
      state.pauseButtonName = "Pause"
        if (state.installed){
          updateLabel()
        }
    }
    section("") {
      input name: "pause", type: "button", title: state.pauseButtonName
    }     
    section("") {
    String defaultName = "Enter a name for this child app"
      if (state.displayName) {
        defaultName = state.displayName
        app.updateLabel(defaultName)
      }
    label title: "Enter a name for this child app", required:false, defaultValue: defaultName, submitOnChange:true   
    }
	   	section("")
		{
			input "HumiditySensor", "capability.relativeHumidityMeasurement", title: "Humidity Sensor:", required: true
			paragraph "NOTE: The humidity sensor you select will need to report about 5 min or less."
           	input "FanSwitch", "capability.switch", title: "Fan Location:", required: true
            input "CompareHumiditySensor", "capability.relativeHumidityMeasurement", title: "Compare to this baseline Humidity Sensor:", required: false
		}
		section("Fan Activation")
		{
			input "HumidityIncreaseRate", "number", title: "Humidity Increase Rate :", required: true, defaultValue: 2
			input "HumidityThreshold", "number", title: "Humidity Threshold (%):", required: false, defaultValue: 65
			input "FanOnDelay", "number", title: "Delay turning fan on (Minutes):", required: false, defaultValue: 0
            
		}
		section("Fan Deactivation")
		{
			input "HumidityDropTimeout", "number", title: "How long after the humidity starts to drop should the fan turn off (minutes):", required: true, defaultValue:  10
			input "HumidityDropLimit", "number", title: "What percentage above the starting humidity before triggering the turn off delay:", required: true, defaultValue:  25
            input "MaxRunTime", "number", title: "Maximum time(minutes) for Fan to run when automatically turned on:", required: false, defaultValue: 120
            input "HumidityIncreasedBy", "number", title: "When humidity rises above or equal to this amount plus the baseline sensor humidity turn on the fan: ", required: false, defaultValue: 9
		}
		section("Manual Activation")
		{
			input "ManualControlMode", "enum", title: "When should the fan turn off when turned on manually?", required: true, options: ["Manually", "By Humidity", "After Set Time"], defaultValue: "After Set Time"
			input "ManualOffMinutes", "number", title: "How many minutes until the fan is auto-turned-off?", required: false, defaultValue: 20
		}
		section("Disable Modes")
		{
			paragraph "What modes do you not want this to run in?"
			input "modes", "mode", title: "select a mode(s)", multiple: true
                if (state.paused) {
                  state.pauseButtonName = "Resume"
                  state.status = "Paused"
                  updateLabel()
                } else {
                  state.pauseButtonName = "Pause"
                }
		}
		section("Logging")
		{                    
		    input "debugLog", "bool", title: "Enable debug logging for 30 minutes", submitOnChange: true, defaultValue: false
            input "logLevel","enum", title: "IDE logging level",required: true,options: getLogLevels(),defaultValue : "1"
		}      
	}
}

def installed()
{
    logDebug("installed")
    initialize()
    state.paused = false
    state.installed = true
}

def updated()
{
    logDebug("updated")
    unsubscribe()
    unschedule()
    initialize()
    updateLabel()
}

def initialize()
{
    logDebug("initialize")
    if(FanSwitch.currentValue("switch") == "on")
    {
      if (!state?.paused) {
         state.status = "(On)"
         updateLabel()
      }
    }
    if(FanSwitch.currentValue("switch") == "off")
    {
      if (!state?.paused) {
         state.status = "(Off)"
         updateLabel()
      }
    }
    state.OverThreshold = false
    state.AutomaticallyTurnedOn = false
    state.TurnOffLaterStarted = false
    subscribe(HumiditySensor, "humidity", HumidityHandler)
    subscribe(FanSwitch, "switch", FanSwitchHandler)
    subscribe(location, "mode", modeChangeHandler)
	compareHumidity()
    updateLabel()
}

void updateLabel()
{
    logDebug("updateLabel")
    if (!app.label.contains("<span") && !app.label.contains("Paused") && state?.displayName != app.label)
    {
    state.displayName = app.label
    }
    if (state.displayName.contains(" <span style=color:red>"))      {state.displayName(app.label.minus("<span style=color:red>(Paused)</span>" ))}
    if (state.displayName.contains(" <span style=color:green>"))    {state.displayName(app.label.minus("<span style=color:green>(On)</span>" ))}
    if (state.displayName.contains(" <span style=color:blue>"))     {state.displayName(app.label.minus("<span style=color:blue>(Off)</span>" ))}
    if (state.displayName.contains(" <span style=color:white>"))    {state.displayName(app.label.minus("<span style=color:white> </span>" ))}
    if (!state.displayName.contains(" <span"))                      {state.displayName}
    
    if (state?.status || state?.paused)
    {
      def status = state?.status
      String label = "${state.displayName} <span style=color:"
      if (state?.paused)
      {
        status = "(Paused)"
        label += "red"
      } else if (state.status == "(On)") {
        status = "(On)"
        label += "green"
      } else if (state.status == "(Off)") {
        status = "(Off)"
        label += "blue"
      } else {
        status = ""
        label += "white"
      }
    label += ">${status}</span>"
    app.updateLabel(label)
    }
}

def modeChangeHandler(evt)
{
	logDebug("modeChangeHandler")
    def allModes = settings.modes
	if(allModes)
	{
		if(allModes.contains(location.mode))
		{
			logDebug("modeChangeHandler: Entered a disable mode, turning off the Fan")
			TurnOffFanSwitch()
		}
	} 
	else
	{	
		logDebug("modeChangeHandler: Entered a disable mode, turning off the Fan")
		TurnOffFanSwitch()
	}
}

def HumidityHandler(evt)
{
	logDebug("HumidityHandler")
	def allModes = settings.modes
	def modeStop = false
	logDebug("HumidityHandler: state.OverThreshold = ${state.OverThreshold}")
	logDebug("HumidityHandler: state.AutomaticallyTurnedOn = ${state.AutomaticallyTurnedOn}")
	logDebug("HumidityHandler: state.TurnOffLaterStarted = ${state.TurnOffLaterStarted}")
	logDebug("HumidityHandler: Before")
	logDebug("HumidityHandler: state.lastHumidity = ${state.lastHumidity}")
	logDebug("HumidityHandler: state.lastHumidityDate = ${state.lastHumidityDate}")
	logDebug("HumidityHandler: state.currentHumidity = ${state.currentHumidity}")
	logDebug("HumidityHandler: state.currentHumidityDate = ${state.currentHumidityDate}")
	logDebug("HumidityHandler: state.StartingHumidity = ${state.StartingHumidity}")
	logDebug("HumidityHandler: state.HighestHumidity = ${state.HighestHumidity}")
	logDebug("HumidityHandler: state.HumidityChangeRate = ${state.HumidityChangeRate}")
	logDebug("HumidityHandler: state.targetHumidity = ${state.targetHumidity}")
    if (CompareHumiditySensor == null) {
      state.threshold = HumidityThreshold
    } else {
      state.threshold = state.baselineHumidity + HumidityIncreasedBy
      state.thresholdOff = state.baselineHumidity + HumidityDecreasedBy
    }
    
    state.OverThreshold = CheckThreshold(evt)
	state.lastHumidityDate = state.currentHumidityDate
    if (CompareHumiditySensor == null) {
	    state.currentHumidity = Double.parseDouble(evt.value.replace("%", ""))
        logDebug("Current humidity update: ${state.currentHumidity} from: ${evt.device}")
    }
    if (!CompareHumiditySensor == null) {
        if (evt.deviceId == CompareHumiditySensor.deviceId) 
        {
            state.baselineHumidity = Double.parseDouble(evt.value.replace("%", ""))
            logDebug("Baseline humidity update : ${state.baselineHumidity} from: ${evt.device}")
        } 
        else 
        {
            state.currentHumidity = Double.parseDouble(evt.value.replace("%", ""))
            logDebug("Current humidity update: ${state.currentHumidity} from: ${evt.device}")
        }
    }
    if (state.currentHumidity)
	{
		state.lastHumidity = state.currentHumidity
	}
	else
	{
		state.lastHumidity = 100
	}
	if (!state.StartingHumidity)
	{
		state.StartingHumidity = 100
	}
	if (!state.HighestHumidity)
	{
		state.HighestHumidity = 100
	}
	state.currentHumidityDate = evt.date.time
	state.HumidityChangeRate = state.currentHumidity - state.lastHumidity
	if(state.currentHumidity>state.HighestHumidity)
	{
		state.HighestHumidity = state.currentHumidity
	}
	state.targetHumidity = state.StartingHumidity+HumidityDropLimit/100*(state.HighestHumidity-state.StartingHumidity)              
	logDebug("HumidityHandler: After")
	logDebug("HumidityHandler: state.lastHumidity = ${state.lastHumidity}")
	logDebug("HumidityHandler: state.lastHumidityDate = ${state.lastHumidityDate}")
	logDebug("HumidityHandler: state.currentHumidity = ${state.currentHumidity}")
	logDebug("HumidityHandler: state.currentHumidityDate = ${state.currentHumidityDate}")
	logDebug("HumidityHandler: state.baselineHumidity = ${state.baselineHumidity}")
    logDebug("HumidityHandler: state.StartingHumidity = ${state.StartingHumidity}")
    logDebug("HumidityHandler: state.threshold = ${state.threshold}")
    logDebug("HumidityHandler: state.thresholdOff = ${state.thresholdOff}")
	logDebug("HumidityHandler: state.HighestHumidity = ${state.HighestHumidity}")
	logDebug("HumidityHandler: state.HumidityChangeRate = ${state.HumidityChangeRate.round(2)}")
	logDebug("HumidityHandler: state.targetHumidity = ${state.targetHumidity}")
	logDebug("HumidityHandler: FanSwitch.current state = ${FanSwitch.currentValue("switch")}")
	//if the humidity is high (or rising fast) and the fan is off, kick on the fan
	if(allModes)
	{
		if(allModes.contains(location.mode))
		{
			modeStop = true
		}
	}
	logDebug("HumidityHandler: modeStop.current state = ${modeStop}")
    if (((state.HumidityChangeRate>HumidityIncreaseRate)||state.OverThreshold) && (FanSwitch.currentValue("switch") == "off")&&!modeStop&&!state.AutomaticallyTurnedOn)
    {
		state.AutomaticallyTurnedOn = true
		state.TurnOffLaterStarted = false
        state.AutomaticallyTurnedOnAt = new Date().format("yyyy-MM-dd HH:mm")
		logInfo("HumidityHandler: Turn On Fan due to humidity increase")
        logInfo("HumidityHandler: Baseline humidity = (${CompareHumiditySensor}): ${state.baselineHumidity}")
        if ((FanOnDelay>0)&&(FanOnDelay!=null))
        {
            logDebug("HumidityHandler: Turn On Fan later")
            runIn(60 * FanOnDelay.toInteger(), TurnOnFan)
        }
        else
        {
	    TurnOnFan()
        }
        state.StartingHumidity = state.lastHumidity
        state.HighestHumidity = state.currentHumidity    
		logDebug("HumidityHandler: new state.StartingHumidity = ${state.StartingHumidity}")
		logDebug("HumidityHandler: new state.HighestHumidity = ${state.HighestHumidity}")
		logDebug("HumidityHandler: new state.targetHumidity = ${state.targetHumidity}")
	}
    else if ( ((state.currentHumidity)>=(state.threshold)) && (FanSwitch.currentValue("switch") == "off") && !modeStop)
    {
        state.AutomaticallyTurnedOn = true
        state.TurnOffLaterStarted = false
        state.AutomaticallyTurnedOnAt = new Date().format("yyyy-MM-dd HH:mm")
        logDebug("HumidityHandler: Baseline humidity(${CompareHumiditySensor}): ${state.baselineHumidity}")
        logDebug("HumidityHandler: settings.HumidityIncreasedBy = ${settings.HumidityIncreasedBy}")
        logDebug("HumidityHandler: state.threshold = ${state.threshold}")
        logDebug("HumidityHandler: state.currentHumidity = (${HumiditySensor}): ${state.currentHumidity}")
        logInfo("Turn On Fan due to humidity increase")
        logInfo("${HumiditySensor} humidity exceeded: ${state.threshold}, current humidity: ${state.currentHumidity}")
        logInfo("Waiting to drop below ${state.thresholdOff} to start timed off sequence")
        FanSwitch.on()
    }
	//turn off the fan when humidity returns to normal and it was kicked on by the humidity sensor
	else if((state.AutomaticallyTurnedOn || ManualControlMode == "By Humidity")&& !state.TurnOffLaterStarted)
	{    
        if(state.currentHumidity<=state.targetHumidity)
        {
            if(HumidityDropTimeout == 0)
            {
                logInfo("HumidityHandler: Turning the Fan off now")
                TurnOffFanSwitch()
            }
            else
            {
                logDebug("HumidityHandler: state.baselineHumidity = (${CompareHumiditySensor}): ${state.baselineHumidity}")
				logInfo("HumidityHandler: Turn Fan off in ${HumidityDropTimeout} minutes.")
				state.TurnOffLaterStarted = true
				runIn(60 * HumidityDropTimeout.toInteger(), TurnOffFanSwitchCheckHumidity)
				logDebug("HumidityHandler: state.TurnOffLaterStarted = ${state.TurnOffLaterStarted}")
			}
		}
	}
}

def FanSwitchHandler(evt)
{
	logDebug("FanSwitchHandler")
	logDebug("FanSwitchHandler: ManualControlMode = ${ManualControlMode}")
	logDebug("FanSwitchHandler: ManualOffMinutes = ${ManualOffMinutes}")
	logDebug("HumidityHandler: state.AutomaticallyTurnedOn = ${state.AutomaticallyTurnedOn}")
	switch(evt.value)
	{
	case "on":
            state.status = "(On)"
            updateLabel()
			if(!state.AutomaticallyTurnedOn && (ManualControlMode == "After Set Time") && ManualOffMinutes)
			{
				if(ManualOffMinutes == 0)
				{
					logDebug("FanSwitchHandler: Turning the Fan off now")
                    state.status = "(Off)"
                    updateLabel()
					TurnOffFanSwitch()
				}
					else
				{
					logDebug("FanSwitchHandler: Will turn off later")
                    state.status = "(On)"
                    updateLabel()
					runIn(60 * ManualOffMinutes.toInteger(), TurnOffFanSwitch)
				}
			}
			break
        case "off":
	    logDebug("FanSwitchHandler: Switch turned off")
        state.status = "(Off)"
        updateLabel()
	    state.AutomaticallyTurnedOn = false
	    state.TurnOffLaterStarted = false
        unschedule()
	    break
    }
}

def TurnOffFanSwitchMaxTime()
{
    logDebug("TurnOffFanSwitchMaxTime")
	TurnOffFanSwitch()
}

def TurnOffFanSwitchCheckHumidity()
{
    logDebug("TurnOffFanSwitchCheckHumidity")
	if(FanSwitch.currentValue("switch") == "on")
    {
		logDebug("TurnOffFanSwitchCheckHumidity: state.HumidityChangeRate ${state.HumidityChangeRate}")
		if(state.currentHumidity > state.targetHumidity)
        {
			logDebug("TurnOffFanSwitchCheckHumidity: Didn't turn off fan because humidity rate is ${state.HumidityChangeRate}")
			state.AutomaticallyTurnedOn = true
			state.TurnOffLaterStarted = false
		}
		else
		{
			TurnOffFanSwitch()
		}
	}
}

def TurnOffFanSwitch()
{
    logDebug("TurnOffFanSwitch")
    if(FanSwitch.currentValue("switch") == "on")
    {
        logInfo("TurnOffFanSwitch: Turning the Fan off now")
        state.status = "(Off)"
        updateLabel()
        FanSwitch.off()
        state.AutomaticallyTurnedOn = false
        state.TurnOffLaterStarted = false
    }
}

def TurnOffFanSwitchManual()
{
    logDebug("TurnOffFanSwitchManual")
    if ((FanSwitch.currentValue("switch") == "on") && (state.AutomaticallyTurnedOn == false))
    {
        logInfo("TurnOffFanSwitchManual: Turning the Fan off now")
        FanSwitch.off()
        state.AutomaticallyTurnedOn = false
        state.TurnOffLaterStarted = false
    }
    else
    {
        logInfo("Not turning off switch, either the switch was off or the Auto routine kicked in")
    }
}

def TurnOnFan()
{
    logDebug("TurnOnFan")
    state.status = "(On)"
    updateLabel()
    FanSwitch.on()
    if(MaxRunTime)
    {
        logDebug("Maximum run time is ${MaxRunTime} minutes")
        runIn(60 * MaxRunTime.toInteger(), TurnOffFanSwitchMaxTime)
    }
}
                  
def CheckThreshold(evt)
{
	logDebug("CheckThreshold")
    double lastevtvalue = Double.parseDouble(evt.value.replace("%", ""))
	if(lastevtvalue >= HumidityThreshold)
	{  
		logInfo("IsHumidityPresent: Humidity is above the Threashold")
		return true
	}
	else
	{
		return false
	}
}

def compareHumidity()
{
    logDebug("compareHumidity")
    if (CompareHumiditySensor == null) {
      myHumid = state.targetHumidity
    } else {
        if (!state.baselineHumidity) { 
          subscribe(CompareHumiditySensor, "humidity", HumidityHandler)
          myHumid = CompareHumiditySensor.currentState("humidity")
          logDebug("${CompareHumiditySensor} currently: ${myHumid.value}")
          state.baselineHumidity = myHumid.value
        }
    }
}

def logInfo(msg)
{       
    def logL = 0
    if (logLevel) logL = logLevel.toInteger()
    if (logL == 0) {return}//bail
    else if (logL >= 1)
	{
		log.info "${state.displayName} ${appVersion()}: ${msg}"
	}
}
def logWarn(msg)
{
    log.warn "${state.displayName} ${appVersion()}: ${msg}"
}

def logTrace(msg)
{
    log.trace "${state.displayName} ${device.label}: ${msg}"
}

def logDebug(msg)
{
	if(debugLog == true)
    {
        log.debug "${state.displayName} ${appVersion()}: ${msg}"
    }
}

def debugOff()
{
    app.updateSetting("debugLog", false)
    log.info "${state.displayName} ${appVersion()}: Debug logging auto disabled"
}

def getLogLevels(){
    return [["0":"None"],["1":"Info"]]
}

def appVersion() {
    return "1.0.2"
}

def setVersion(){
    state.version = "1.0.2" // Version number of this app
    state.InternalName = "BathroomHumidityFan"   // this is the name used in the JSON file for this app
}
