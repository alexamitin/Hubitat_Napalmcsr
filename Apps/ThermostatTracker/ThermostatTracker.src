
/* Copyright 2020 csromei
*
*   Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*   You may obtain a copy of the License at
*
*       http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*   distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*  
*/

definition(
    name: "Thermostat Tracker",
    namespace: "Craig.Romei",
    author: "Craig Romei",
    description: "Track Thermostat usage",
    category: "Tracking",
    iconUrl: "https://raw.githubusercontent.com/napalmcsr/SmartThingsStuff/master/smartapps/keenect/clipart-thermometer-thermometer-clipart-free-6-thermometer-clip-art-clipartix-free-clipart.jpg",
    iconX2Url: "https://raw.githubusercontent.com/napalmcsr/SmartThingsStuff/master/smartapps/keenect/clipart-thermometer-thermometer-clipart-free-6-thermometer-clip-art-clipartix-free-clipart.jpg",
	iconX3Url	: "https://raw.githubusercontent.com/napalmcsr/SmartThingsStuff/master/smartapps/keenect/clipart-thermometer-thermometer-clipart-free-6-thermometer-clip-art-clipartix-free-clipart.jpg"
   
)
preferences {
    page(name: "pageConfig") // Doing it this way elimiates the default app name/mode options.
    page(name: "pageStatus")
}
def pageConfig()
{
	dynamicPage(name: "", title: "", install: true, uninstall: true, refreshInterval:0) 
	{		
		section("Versioning")
		{
			display()
		}
		section("Report")
		{
			href "pageStatus", title: "Thermostat Usage", description: "Tap to see Thermostat usage"
			input "DashboardTileUpdate", "capability.sensor", title: "Display Tile:", required: false
		}
		section("Thermostat")
		{
			input "tstat", "capability.thermostat", title: "Thermostat:", required: true
		}
		section("Logging")
		{
			input name : "logLevel",title : "IDE logging level",multiple : false,required : true,type : "enum",options  : getLogLevels(),submitOnChange : false,defaultValue : "0"
		}	
		section() {
			label title: "Enter a name for this automation", required: false
		}
	}
}
def pageStatus(){
	dynamicPage(
    	name		: "Status"
        ,title		: "Thermostat Usage"
        ,install	: false
        ,uninstall	: false
        )
	{
    	section(){
				def reportString ="Day"+"\t\t\t"+"idle"+"\t\t"+"cooling"+"\t"+"heating"+"\t"+"fan only"+"\t"+"pend cool"+"\t"+"pend heat"+"\t"+ "vent econ" +"\n"
					reportString += "Today"+"\t\t"+convtime(state.StatusMapToday["idle"])+"\t"+convtime(state.StatusMapToday["cooling"]) +"\t"
					reportString += convtime(state.StatusMapToday["heating"]) +"\t" +convtime(state.StatusMapToday["fan only"]) +"\t"
					reportString += convtime(state.StatusMapToday["pending cool"]) +"\t\t" +convtime(state.StatusMapToday["pending heat"]) +"\t\t"
					reportString += convtime(state.StatusMapToday["vent economizer"]) +"\n"
					for(int i = 0;i<=6;i++) 
					{
						reportString += i+" day(s) ago"+"\t"+convtime(state.Last7Days[i]["idle"])+"\t"+convtime(state.Last7Days[i]["cooling"]) +"\t"
						reportString += convtime(state.Last7Days[i]["heating"]) +"\t" +convtime(state.Last7Days[i]["fan only"]) +"\t"
						reportString += convtime(state.Last7Days[i]["pending cool"]) +"\t\t" +convtime(state.Last7Days[i]["pending heat"]) +"\t\t"
						reportString += convtime(state.Last7Days[i]["vent economizer"]) +"\n"
					}
			paragraph reportString
   		}
   }
}

def installed()
{
    initialize()
}

def updated()
{
	unsubscribe()
    initialize()
}

def initialize()
{
	infolog "Initializing"
    def now = new Date().getTime().intdiv(1000)
	unsubscribe()
	debuglog "Getting Thermostat running State" 
	state.mainTstatState = state.mainTstatState ?: getMainTstatState()
	state.stateChangeTime = state.stateChangeTime ?: now
    subscribe(tstat, "thermostatOperatingState", tstatStateHandler)
    debuglog "${TimeToRun}" 
    schedule("0 0 0 * * ?", Timehandler)
	if(!state.StatusMapToday){
		debuglog "Initializing a new Day"
		state.StatusMapToday = [:]
		InitializeNewDay()
	}
	if(!state.Last7Days)
	{
		state.Last7Days = new Map[7]
		for(int i = 6;i>=0;i--) 
		{
			state.Last7Days[i] = [:]
		}
	}
	if(DashboardTileUpdate)
    {
        CreateVerticalDashboardNow()
        CreateVerticalDashboardHistory()
    }
    infolog "initialize- complete"
}

def tstatStateHandler(evt){
    infolog "tstatStateHandler- evt name: ${evt.name}, value: ${evt.value}"
	UpdateTimeRunning()
    state.mainTstatState = evt.value.toUpperCase()
    if(DashboardTileUpdate)
    {
        CreateVerticalDashboardNow()
    }
	debuglog "tstatStateHandler- state.mainTstatState : ${state.mainTstatState}"
    infolog "tstatStateHandler- complete"
}

def UpdateTimeRunning()
{    
	def now = new Date().getTime().intdiv(1000)
	def timeRunning = now - state.stateChangeTime.toInteger()
	debuglog "UpdateTimeRunning- Time Running: ${timeRunning}"
	switch (state.mainTstatState){
			case "HEATING" :
				state.StatusMapToday["heating"] += timeRunning
				break
			case "COOLING" :
				state.StatusMapToday["cooling"] += timeRunning
				break
			case "IDLE" :
				state.StatusMapToday["idle"] += timeRunning
				break
			case "FAN ONLY" :
				state.StatusMapToday["fan only"] += timeRunning
				break
			case "VENT ECONOMIZER" :
				state.StatusMapToday["vent economizer"] += timeRunning
				break
			case "PENDING HEAT" :
				state.StatusMapToday["pending heat"] += timeRunning
				break
			case "PENDING COOL" :
				state.StatusMapToday["pending cool"] += timeRunning
				break
			default :
				infolog "UpdateTimeRunning- Error, bad tstat state"
				break   
		} 
	state.stateChangeTime = now
	
}

def Timehandler()
{
    infolog "Timehandler - started"
	UpdateTimeRunning()
	for(int i = 5;i>=0;i--) 
	{
		state.Last7Days[i+1]=state.Last7Days[i].clone()
	}
	state.Last7Days[0] = state.StatusMapToday.clone()
	InitializeNewDay()
    if(DashboardTileUpdate)
    {
        CreateVerticalDashboardNow()
        CreateVerticalDashboardHistory()
    }
    infolog "Timehandler - complete"
}

def InitializeNewDay()
{
	state.StatusMapToday["idle"] = 0
	state.StatusMapToday["cooling"] = 0
	state.StatusMapToday["heating"] = 0
	state.StatusMapToday["fan only"] = 0
	state.StatusMapToday["vent economizer"] = 0
	state.StatusMapToday["pending heat"] = 0
	state.StatusMapToday["pending cool"] = 0
}
	
def getMainTstatState(){
	def TstatState = tstat.currentValue("thermostatOperatingState")
	if (TstatState!=null){
		TstatState = TstatState.toUpperCase()
	} else {
    	TstatState = "NULL"
    }
    debuglog "getMainTstatState Main TstatState : ${TstatState}"
	return TstatState
 }	
	
def convtime(seconds)
{
	if(!seconds)
	{
		seconds = 0
	}
	def hour =  seconds.intdiv(60*60)
//	hour = Math.round(hour)
	def minutes = (seconds%(60*60))/60
	minutes = Math.round(minutes)
	return String.format('%02d',hour)+":"+String.format('%02d',minutes)
}
	
def CreateVerticalDashboardNow()
{
    debuglog "CreateVerticalDashboardNow - Start"
    def reportString ="Today<br>"+"idle:"+"\t\t\t"+convtime(state.StatusMapToday["idle"])+"<br>"
        reportString +="cooling:"+"\t\t"+convtime(state.StatusMapToday["cooling"]) +"<br>"
        reportString += "heating"+"\t\t"+convtime(state.StatusMapToday["heating"]) +"<br>"
        reportString += "fan only"+"\t\t"+convtime(state.StatusMapToday["fan only"]) +"<br>"
        reportString += "pend cool"+"\t"+convtime(state.StatusMapToday["pending cool"]) +"<br>"
        reportString += "pend heat"+"\t"+convtime(state.StatusMapToday["pending heat"]) +"<br>"
        reportString += "vent econ"+"\t"+convtime(state.StatusMapToday["vent economizer"]) +"<br>"
    DashboardTileUpdate.SetToday(reportString)
    debuglog "CreateVerticalDashboardNow - ${reportString}"
}
	
def CreateVerticalDashboardHistory()
{
    debuglog "CreateVerticalDashboardNow - Start"
    def reportString = ""
    for(int i = 0;i<=6;i++) 
    {
        if(i==0)
        {
            reportString = "Yesterday<br>"
        }
        else
        {
            reportString = (i+1)+" days ago<br>"
        }
        reportString +="idle:"+"\t\t\t"+convtime(state.Last7Days[i]["idle"])+"<br>"
        reportString +="cooling:"+"\t\t"+convtime(state.Last7Days[i]["cooling"]) +"<br>"
        reportString += "heating"+"\t\t"+convtime(state.Last7Days[i]["heating"]) +"<br>"
        reportString += "fan only"+"\t\t"+convtime(state.Last7Days[i]["fan only"]) +"<br>"
        reportString += "pend cool"+"\t"+convtime(state.Last7Days[i]["pending cool"]) +"<br>"
        reportString += "pend heat"+"\t"+convtime(state.Last7Days[i]["pending heat"]) +"<br>"
        reportString += "vent econ"+"\t"+convtime(state.Last7Days[i]["vent economizer"]) +"<br>"
        switch (i){
			case 0 :
				DashboardTileUpdate.SetYesterday(reportString)
				break
			case 1 :
				DashboardTileUpdate.SetTwoDaysAgo(reportString)
				break
			case 2 :
				DashboardTileUpdate.SetThreeDaysAgo(reportString)
				break
			case 3 :
				DashboardTileUpdate.SetFourDaysAgo(reportString)
				break
			case 4 :
				DashboardTileUpdate.SetFiveDaysAgo(reportString)
				break
			case 5 :
				DashboardTileUpdate.SetSixDaysAgo(reportString)
				break
			case 6 :
				DashboardTileUpdate.SetSevenDaysAgo(reportString)
				break
			default :
				debuglog "CreateVerticalDashboardNow - Not a valid day!"
				break
				   
		} 
    }
}
	
	
	
	
def debuglog(statement)
{   
    def logL = 0
    if (logLevel) logL = logLevel.toInteger()
    if (logL == 0) {return}//bail
    else if (logL >= 2)
	{
	  	log.debug(statement)
	}
}
def infolog(statement)
{       
    def logL = 0
    if (logLevel) logL = logLevel.toInteger()
    if (logL == 0) {return}//bail
    else if (logL >= 1)
    {
    	log.info(statement)
    }
}
def getLogLevels(){
    return [["0":"None"],["1":"Running"],["2":"NeedHelp"]]
}
def version(){
        unschedule()
        schedule("0 0 9 ? * FRI *", updateCheck) // Cron schedule - How often to perform the update check - (This example is 9am every Friday)
        updateCheck()  
}

def display(){
	updateCheck()
	debuglog "state.Status: ${state.Status}"
        if(state.Status){
        section{paragraph "Version: $state.version -  $state.Copyright"}
        
        if(state.Status != "Current"){
        section{ 
        paragraph "$state.Status"
        paragraph "$state.UpdateInfo"
    }
    }
}
}


def updateCheck(){
    setVersion()
        def paramsUD = [uri: "https://napalmcsr.github.io/Hubitat_Napalmcsr/versions.json"]   // This is the URI & path to your hosted JSON file
       try {
        httpGet(paramsUD) { respUD ->
//  log.warn " Version Checking - Response Data: ${respUD.data}"   // Troubleshooting Debug Code 
                def copyrightRead = (respUD.data.copyright)
                state.Copyright = copyrightRead
            def newVerRaw = (respUD.data.versions.Application.(state.InternalName))
            def newVer = (respUD.data.versions.Application.(state.InternalName).replace(".", ""))
                def currentVer = state.version.replace(".", "")
                state.UpdateInfo = (respUD.data.versions.UpdateInfo.Application.(state.InternalName))
                state.author = (respUD.data.author)
           
                if(newVer == "NLS"){
            state.Status = "<b>** This app is no longer supported by $state.author  **</b> (But you may continue to use it)"       
            log.warn "** This app is no longer supported by $state.author **"      
                }           
                else if(currentVer < newVer){
        state.Status = "<b>New Version Available (Version: $newVerRaw)</b>"
        log.warn "** There is a newer version of this app available  (Version: $newVerRaw) **"
        log.warn "** $state.UpdateInfo **"
                } 
                else{ 
                state.Status = "Current"
                log.info "You are using the current version of this app"
                }
                                       }
        } 
        catch (e) {
            state.Status = "Error"
        log.error "Something went wrong: CHECK THE JSON FILE AND IT'S URI -  $e"
                }
                
    
        //     
}

def setVersion(){
                state.version = "2.0.1" // Version number of this app
                state.InternalName = "TstatTracker"   // this is the name used in the JSON file for this app
				}
