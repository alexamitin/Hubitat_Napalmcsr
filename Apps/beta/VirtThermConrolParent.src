/**
*  Virtual Thermostat Control Parent
*
* Puts a temp sensor to control the temperature of a virtual thermostat
*
*  Copyright 2018 Craig Romei
*  GNU General Public License v2 (https://www.gnu.org/licenses/gpl-2.0.txt)
*
*/

definition(
    name: "Virtual Thermostat Control Parent",
    namespace: "Craig.Romei",
    author: "Craig Romei",
    description: "Virtual Thermostat Control Parent",
    category: "Convenience",
    installOnOpen: true,
    iconUrl: "https://raw.githubusercontent.com/napalmcsr/SmartThingsStuff/master/smartapps/craig-romei/Bathroom_Fan.jpg",
    iconX2Url: "https://raw.githubusercontent.com/napalmcsr/SmartThingsStuff/master/smartapps/craig-romei/Bathroom_Fan.jpg",
    iconX3Url: "https://raw.githubusercontent.com/napalmcsr/SmartThingsStuff/master/smartapps/craig-romei/Bathroom_Fan.jpg"
)
preferences {
    page(name: "pageConfig") // Doing it this way elimiates the default app name/mode options.
}
def pageConfig()
{
    dynamicPage(name: "", title: "", install: true, uninstall: true, refreshInterval:0) 
    {
		 if (installed)
        {
	        section("Thermostats")
            {
			    app(name: "Thermostat", appName: "Virtual Thermostat Control Child", namespace: "Craig.Romei", title: "<b>Add a new Virtual Thermostat</b>",description: "Create New Thermostat Conrol...", multiple: true)	
		    }
	    }    
	    section("Logging")
	    {
            input "logLevel","enum",title: "IDE logging level",required: true,options: getLogLevels(),defaultValue : "2"  
	    }
    }
}
def installed() {initialize()}
def updated() {initialize()}
def initialize() {
    unsubscribe()
	version()
    
    log.info "Initialised with settings: ${settings}"
    log.info "There are ${childApps.size()} installed child apps"
    childApps.each {child ->
    log.info "Child app: ${child.label}"
    }    
}
	 


def debuglog(statement)
{   
               def logL = 0
    if (logLevel) logL = logLevel.toInteger()
    if (logL == 0) {return}//bail
    else if (logL >= 2)
               {
                              log.debug(statement)
               }
}
def infolog(statement)
{       
               def logL = 0
    if (logLevel) logL = logLevel.toInteger()
    if (logL == 0) {return}//bail
    else if (logL >= 1)
               {
                              log.info(statement)
    }
}
def getLogLevels(){
    return [["0":"None"],["1":"Running"],["2":"NeedHelp"]]
}


def setVersion(){
                state.version = "1.0.1" // Version number of this app
                state.InternalName = "VirtThermConrolParent"   // this is the name used in the JSON file for this app
}
