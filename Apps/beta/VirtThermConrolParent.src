/**
*  Virtual Thermostat Control Parent
*
* Puts a temp sensor to control the temperature of a virtual thermostat
*
*  Copyright 2018 Craig Romei
*  GNU General Public License v2 (https://www.gnu.org/licenses/gpl-2.0.txt)
*
*/

definition(
    name: "Virtual Thermostat Control Parent",
    namespace: "napalmcsr",
    author: "Craig Romei",
    description: "Virtual Thermostat Control Parent",
    category: "Convenience",
    iconUrl: "https://raw.githubusercontent.com/napalmcsr/SmartThingsStuff/master/smartapps/craig-romei/Bathroom_Fan.jpg",
    iconX2Url: "https://raw.githubusercontent.com/napalmcsr/SmartThingsStuff/master/smartapps/craig-romei/Bathroom_Fan.jpg",
    iconX3Url: "https://raw.githubusercontent.com/napalmcsr/SmartThingsStuff/master/smartapps/craig-romei/Bathroom_Fan.jpg"
)
preferences{
    section("Versioning")
    {
        display()
    }
		 if (installed){
			section("Thermostats"){
				app(name: "Thermostat", appName: "Virtual Thermostat Control Child", namespace: "napalmcsr", title: "<b>Add a new Virtual Thermostat</b>",description: "Create New Thermostat Conrol...", multiple: true)	
			}
		 }
}
def installed() {initialize()}
def updated() {initialize()}
def initialize() {
    unsubscribe()
	version()
    
    log.info "Initialised with settings: ${settings}"
    log.info "There are ${childApps.size()} installed child apps"
    childApps.each {child ->
    log.info "Child app: ${child.label}"
    }    
}
	 


def debuglog(statement)
{   
               def logL = 0
    if (logLevel) logL = logLevel.toInteger()
    if (logL == 0) {return}//bail
    else if (logL >= 2)
               {
                              log.debug(statement)
               }
}
def infolog(statement)
{       
               def logL = 0
    if (logLevel) logL = logLevel.toInteger()
    if (logL == 0) {return}//bail
    else if (logL >= 1)
               {
                              log.info(statement)
    }
}
def getLogLevels(){
    return [["0":"None"],["1":"Running"],["2":"NeedHelp"]]
}
def version(){
        unschedule()
        schedule("0 0 9 ? * FRI *", updateCheck) // Cron schedule - How often to perform the update check - (This example is 9am every Friday)
        updateCheck()  
}

def display(){
        if(state.Status){
        section{paragraph "Version: $state.version -  $state.Copyright"}
        
        if(state.Status != "Current"){
        section{ 
        paragraph "$state.Status"
        paragraph "$state.UpdateInfo"
    }
    }
}
}


def updateCheck(){
    setVersion()
        def paramsUD = [uri: "https://napalmcsr.github.io/Hubitat_Napalmcsr/versions.json"]   // This is the URI & path to your hosted JSON file
       try {
        httpGet(paramsUD) { respUD ->
//  log.warn " Version Checking - Response Data: ${respUD.data}"   // Troubleshooting Debug Code 
                def copyrightRead = (respUD.data.copyright)
                state.Copyright = copyrightRead
            def newVerRaw = (respUD.data.versions.Application.(state.InternalName))
            def newVer = (respUD.data.versions.Application.(state.InternalName).replace(".", ""))
                def currentVer = state.version.replace(".", "")
                state.UpdateInfo = (respUD.data.versions.UpdateInfo.Application.(state.InternalName))
                state.author = (respUD.data.author)
           
                if(newVer == "NLS"){
            state.Status = "<b>** This app is no longer supported by $state.author  **</b> (But you may continue to use it)"       
            log.warn "** This app is no longer supported by $state.author **"      
                }           
                else if(currentVer < newVer){
        state.Status = "<b>New Version Available (Version: $newVerRaw)</b>"
        log.warn "** There is a newer version of this app available  (Version: $newVerRaw) **"
        log.warn "** $state.UpdateInfo **"
                } 
                else{ 
                state.Status = "Current"
                log.info "You are using the current version of this app"
                }
                                       }
        } 
        catch (e) {
            state.Status = "Error"
        log.error "Something went wrong: CHECK THE JSON FILE AND IT'S URI -  $e"
                }
                
    
        //     
}

def setVersion(){
                state.version = "1.0.0" // Version number of this app
                state.InternalName = "VirtThermConrolParent"   // this is the name used in the JSON file for this app
}
