/**
*  Virtual Thermostat Temperature Control Child
*
*  V1.0.0 Initial Release
*
*  Updates the temperature of a virtual thermostat using a temp sensor
*
*  Copyright 2018 Craig Romei
*  GNU General Public License v2 (https://www.gnu.org/licenses/gpl-2.0.txt)
*
*/

definition(
    name: "Virtual Thermostat Control Child",
    namespace: "napalmcsr",
    author: "Craig Romei",
    description: "Update a Virtual Thermostats temperature using a temperature sensor",
    category: "Convenience",
    parent: "napalmcsr:Virtual Thermostat Control Parent",
    iconUrl: "https://raw.githubusercontent.com/napalmcsr/SmartThingsStuff/master/smartapps/craig-romei/Bathroom_Fan.jpg",
    iconX2Url: "https://raw.githubusercontent.com/napalmcsr/SmartThingsStuff/master/smartapps/craig-romei/Bathroom_Fan.jpg",
    iconX3Url: "https://raw.githubusercontent.com/napalmcsr/SmartThingsStuff/master/smartapps/craig-romei/Bathroom_Fan.jpg"
)
preferences {
    page(name: "pageConfig") // Doing it this way elimiates the default app name/mode options.
}
def pageConfig()
{
	dynamicPage(name: "", title: "", install: true, uninstall: true, refreshInterval:0) {
		section("Versioning")
		{
			display()
		}
		section("Sensor, Thermostat, and Switches")
		{
			input name : "tStat", type : "capability.thermostat", title: "Virtual thermostat control", required: true
			input "TemperatureSensor", "capability.temperatureMeasurement", title: "Temperature Sensor:", required: true
			input "enableSwitch", "capability.switch", title: "Switch that enables Thermostat Control (always on if not specified)", required: false
			input "HeatSwitch", "capability.switch", title: "Switch that runs heating device", required: false
			input "CoolSwitch", "capability.switch", title: "Switch that runs cooling device", required: false
		}	
		section("Timer Settings")
		{
			input "refreshInt", "number", title: "Number of Minutes between temp sensor refreshes:", required: true, defaultValue:  5
			input "DeadmanTime", "number", title: "Maximun number of minutes between temp sensor updates until heat and ccol are disabled:", required: false, defaultValue:  11
		}

		section("Logging")
		{                       
			input(
			name                      : "logLevel"
			,title                       : "IDE logging level" 
			,multiple        : false
			,required                : true
			,type                       : "enum"
			,options              : getLogLevels()
			,submitOnChange : false
			,defaultValue : "0"
			)  
		}
		section() {label title: "Enter a name for this automation", required: false}
	}
}

def installed()
{
    initialize()
}

def updated()
{
    unsubscribe()
	unschedule()
    initialize()
}

def initialize()
{
    infolog "Initializing"
	Unschedule
	unsubscribe
	subscribe(TemperatureSensor, "temperature", TemperatureHandler)
	subscribe(tStat, "thermostatOperatingState", TStatStateHandler)
	if (enableSwitch!=""){
        debuglog "Subscribed"
		subscribe(enableSwitch, "switch", enableHandler)
	}
	debuglog "Getting current Temperature and updating Thermostat" 
	state.deadman = false
	state.ThermostatState = tStat.currentValue("thermostatOperatingState")
	if (!enableSwitch) {
		state.enable = true  
		TempSensorPolling(true)
		runIn(15*1,CheckDisableCheckThermostatControl)
	}
	else if (enableSwitch.currentValue("switch") == "on") {
		state.enable = true  
		TempSensorPolling(true)
		runIn(15*1,CheckDisableCheckThermostatControl)
	}
    else{
        state.enable = false
    }
    //version()
    infolog "Done initializing"
}

def TemperatureHandler(evt){
    debuglog "TemperatureHandler- evt name: ${evt.name}, value: ${evt.value}" 
    state.lastTemp = evt.value.toFloat()   
	tStat.setTemperature(state.lastTemp)
	DeadmanHandler()
	infolog "Temperature Set to Thermostat!"
}

def enableHandler(evt){
    debuglog "EnableHandler- evt name: ${evt.name}, value: ${evt.value}" 
	if (evt.value=="on") {
		state.enable = true  
		TempSensorPolling(true)
		CheckDisableCheckThermostatControl()
	}		
	else {
		state.enable = false
		turnOffAll()
		TempSensorPolling(false)
	}
	
}

def DeadmanHandler()
{
    debuglog "DeadmanHandler- enableDeadman:" 
//	if (DeadmanTime!=""){
        state.deadman = true
        debuglog "Deadman on"
        if (state.enable)
        {
            CheckDisableCheckThermostatControl()
        }
        runIn(60 * DeadmanTime, DeadmanOff)
//	}
}

def DeadmanOff()
{
    state.deadman = false
    debuglog "Deadman off"
    turnOffAll()
}

def TStatStateHandler(evt)
{
    debuglog "state.ThermostatState: " + evt.value
	state.ThermostatState = evt.value
	CheckDisableCheckThermostatControl()
}

def CheckDisableCheckThermostatControl()
{
	if (state.deadman&&state.enable){
		CheckThermostatControl()
	}
	else{
        debuglog "state.deadman: " + state.deadman
        debuglog "state.enable: " + state.enable
		turnOffAll()
	}
}

def CheckThermostatControl()
{
    debuglog "state.ThermostatState: " + state.ThermostatState
	switch(state.ThermostatState)
	{
		case "heating":
            debuglog "turn On Heating"
			if (HeatSwitch){
				HeatSwitch.on()
			}
			if (CoolSwitch){
				CoolSwitch.off()
			}
		break
		case "cooling":
            debuglog "turn On cooling"
			if (HeatSwitch){
				HeatSwitch.off()
			}
			if (CoolSwitch){
				CoolSwitch.on()
			}
		break
		default:
            debuglog "Turn Off Everything"
			turnOffAll()
		break
	}
}

def turnOffAll()
{
    debuglog "turn off everything"
	if (HeatSwitch){
		HeatSwitch.off()
	}
	if (CoolSwitch){
		CoolSwitch.off()
	}
}

def TempSensorPolling(enable)
{
	if (enable){
		refreshTempSensor()
	}
	else{
		unschedule(refreshTempSensor)
	}
}

def refreshTempSensor()
{
    debuglog "Refreshing Temp Sensor"
	TemperatureSensor.refresh()
	runIn(60 * refreshInt, refreshTempSensor)
}

def debuglog(statement)
{   
               def logL = 0
    if (logLevel) logL = logLevel.toInteger()
    if (logL == 0) {return}//bail
    else if (logL >= 2)
               {
                              log.debug(statement)
               }
}
def infolog(statement)
{       
               def logL = 0
    if (logLevel) logL = logLevel.toInteger()
    if (logL == 0) {return}//bail
    else if (logL >= 1)
               {
                              log.info(statement)
    }
}
def getLogLevels(){
    return [["0":"None"],["1":"Running"],["2":"NeedHelp"]]
}
def version(){
        unschedule()
        schedule("0 0 9 ? * FRI *", updateCheck) // Cron schedule - How often to perform the update check - (This example is 9am every Friday)
        updateCheck()  
}

def display(){
        if(state.Status){
        section{paragraph "Version: $state.version -  $state.Copyright"}
        
        if(state.Status != "Current"){
        section{ 
        paragraph "$state.Status"
        paragraph "$state.UpdateInfo"
    }
    }
}
}


def updateCheck(){
    setVersion()
        def paramsUD = [uri: "https://napalmcsr.github.io/Hubitat_Napalmcsr/versions.json"]   // This is the URI & path to your hosted JSON file
       try {
        httpGet(paramsUD) { respUD ->
//  log.warn " Version Checking - Response Data: ${respUD.data}"   // Troubleshooting Debug Code 
                def copyrightRead = (respUD.data.copyright)
                state.Copyright = copyrightRead
            def newVerRaw = (respUD.data.versions.Application.(state.InternalName))
            def newVer = (respUD.data.versions.Application.(state.InternalName).replace(".", ""))
                def currentVer = state.version.replace(".", "")
                state.UpdateInfo = (respUD.data.versions.UpdateInfo.Application.(state.InternalName))
                state.author = (respUD.data.author)
           
                if(newVer == "NLS"){
            state.Status = "<b>** This app is no longer supported by $state.author  **</b> (But you may continue to use it)"       
            log.warn "** This app is no longer supported by $state.author **"      
                }           
                else if(currentVer < newVer){
        state.Status = "<b>New Version Available (Version: $newVerRaw)</b>"
        log.warn "** There is a newer version of this app available  (Version: $newVerRaw) **"
        log.warn "** $state.UpdateInfo **"
                } 
                else{ 
                state.Status = "Current"
                log.info "You are using the current version of this app"
                }
                                       }
        } 
        catch (e) {
            state.Status = "Error"
        log.error "Something went wrong: CHECK THE JSON FILE AND IT'S URI -  $e"
                }
                
    
        //     
}

def setVersion(){
                state.version = "1.0.0" // Version number of this app
                state.InternalName = "ThermostatControlChild"   // this is the name used in the JSON file for this app
}
