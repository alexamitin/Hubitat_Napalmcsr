/**
*  Virtual Thermostat Temperature Control Child
*
*  V1.0.0 Initial Release
*
*  Updates the temperature of a virtual thermostat using a temp sensor
*
*  Copyright 2018 Craig Romei
*  GNU General Public License v2 (https://www.gnu.org/licenses/gpl-2.0.txt)
*
*/

definition(
    name: "Virtual Thermostat Control Child",
    namespace: "Craig.Romei",
    author: "Craig Romei",
    description: "Run switched based off a virtual thermostat that is updated by a temperature sensor",
    category: "Convenience",
    parent: "Craig.Romei:Virtual Thermostat Control Parent",
    iconUrl: "https://raw.githubusercontent.com/napalmcsr/SmartThingsStuff/master/smartapps/craig-romei/Bathroom_Fan.jpg",
    iconX2Url: "https://raw.githubusercontent.com/napalmcsr/SmartThingsStuff/master/smartapps/craig-romei/Bathroom_Fan.jpg",
    iconX3Url: "https://raw.githubusercontent.com/napalmcsr/SmartThingsStuff/master/smartapps/craig-romei/Bathroom_Fan.jpg"
)
preferences {
    page(name: "pageConfig") // Doing it this way elimiates the default app name/mode options.
}
def pageConfig()
{
	dynamicPage(name: "", title: "", install: true, uninstall: true, refreshInterval:0) 
    {
		section("Sensor, Thermostat, and Switches")
		{
			input name : "tStat", type : "capability.thermostat", title: "Virtual thermostat control", required: true
			input "TemperatureSensor", "capability.temperatureMeasurement", title: "Temperature Sensor:", required: true
			input "enableSwitch", "capability.switch", title: "Switch that enables Thermostat Control (always on if not specified)", required: false
			input "HeatSwitch", "capability.switch", title: "Switch that runs heating device", required: false
			input "CoolSwitch", "capability.switch", title: "Switch that runs cooling device", required: false
		}	
		section("Timer Settings")
		{
			input "refreshInt", "number", title: "Number of Minutes between temp sensor refreshes:", required: true, defaultValue:  5
			input "DeadmanTime", "number", title: "Maximun number of minutes between temp sensor updates until heat and ccol are disabled:", required: false, defaultValue:  11
		}
		section("Logging")
		{             
		    input "logLevel","enum",title: "IDE logging level",required: true,options: getLogLevels(),defaultValue : "2"
		}
		section() 
        {
            label title: "Enter a name for this automation", required: false
        }
	}
}

def installed()
{
    initialize()
}

def updated()
{
    unsubscribe()
	unschedule()
    initialize()
}

def initialize()
{
    infolog "Initializing"
	unschedule()
	unsubscribe()
	subscribe(TemperatureSensor, "temperature", TemperatureHandler)
	subscribe(tStat, "thermostatOperatingState", TStatStateHandler)
	if (enableSwitch!=""){
        debuglog "Subscribed"
		subscribe(enableSwitch, "switch", enableHandler)
	}
	debuglog "Getting current Temperature and updating Thermostat" 
	state.deadman = false
	state.ThermostatState = tStat.currentValue("thermostatOperatingState")
	if (!enableSwitch) {
		state.enable = true  
		TempSensorPolling(true)
		runIn(15*1,CheckDisableCheckThermostatControl)
	}
	if(HeatSwitch) {
	subscribe(tStat, "heatingSetpoint", HeatSPHandler)
	state.HeatSP = tStat.currentValue("heatingSetpoint")
	}
	if(CoolSwitch) {
	subscribe(tStat, "coolingSetpoint", CoolSPHandler)
	state.CoolSP = tStat.currentValue("coolingSetpoint")
	}
	else if (enableSwitch.currentValue("switch") == "on") {
		state.enable = true  
		TempSensorPolling(true)
		runIn(15*1,CheckDisableCheckThermostatControl)
	}
    else{
        state.enable = false
    }
    //version()
    infolog "Done initializing"
}

def HeatSPHandler(evt){
	debuglog "HeatSPHandler- evt name: ${evt.name}, value: ${evt.value}" 
	state.HeatSP = evt.value.toFloat()
}

def CoolSPHandler(evt){
	debuglog "CoolSPHandler- evt name: ${evt.name}, value: ${evt.value}" 
	state.CoolSP = evt.value.toFloat()
}
o
def TemperatureHandler(evt){
    debuglog "TemperatureHandler- evt name: ${evt.name}, value: ${evt.value}" 
    state.lastTemp = evt.value.toFloat()   
	tStat.setTemperature(state.lastTemp)
	DeadmanHandler()
    checkTempRange()
	infolog "Temperature Set to Thermostat!"
}

def enableHandler(evt){
    debuglog "EnableHandler- evt name: ${evt.name}, value: ${evt.value}" 
	if (evt.value=="on") {
		state.enable = true  
		TempSensorPolling(true)
		runIn(15*1,CheckDisableCheckThermostatControl)
	}		
	else {
		state.enable = false
		turnOffAll()
		TempSensorPolling(false)
        unschedule()
	}
	
}

def DeadmanHandler()
{
    debuglog "DeadmanHandler- enableDeadman:" 
//	if (DeadmanTime!=""){
        state.deadman = true
        debuglog "Deadman on"
        if (state.enable)
        {
            runIn(60 * DeadmanTime-30, DeadmanCheck)
            runIn(60 * DeadmanTime, DeadmanOff)
        }
//	}
}

def DeadmanCheck()
{
        debuglog "Deadman Check"
		refreshTempSensor()
}
def DeadmanOff()
{
    state.deadman = false
    debuglog "Deadman off"
    turnOffAll()
}

def TStatStateHandler(evt)
{
    debuglog "state.ThermostatState: " + evt.value
	state.ThermostatState = evt.value
	CheckDisableCheckThermostatControl()
}

def CheckDisableCheckThermostatControl()
{
	if (state.deadman&&state.enable){
		CheckThermostatControl()
	}
	else{
        debuglog "state.deadman: " + state.deadman
        debuglog "state.enable: " + state.enable
		turnOffAll()
	}
}

def CheckThermostatControl()
{
    debuglog "state.ThermostatState: " + state.ThermostatState
	switch(state.ThermostatState)
	{
		case "heating":
            debuglog "turn On Heating"
			if (HeatSwitch){
				HeatSwitch.on()
			}
			if (CoolSwitch){
				CoolSwitch.off()
			}
		break
		case "cooling":
            debuglog "turn On cooling"
			if (HeatSwitch){
				HeatSwitch.off()
			}
			if (CoolSwitch){
				CoolSwitch.on()
			}
		break
		default:
            debuglog "Turn Off Everything"
			turnOffAll()
		break
	}
}

def turnOffAll()
{
    debuglog "turn off everything"
	if (HeatSwitch){
		HeatSwitch.off()
	}
	if (CoolSwitch){
		CoolSwitch.off()
	}
}

def checkTempRange()
{
    outofRange=true
    if (HeatSwitch){
        if (state.HeatSP+1.25>state.lastTemp){
            outofRange=false
            debuglog "Heat not OOR"
        }
    }
    if (CoolSwitch){
        if (state.CoolSP-1.25<state.lastTemp){
            outofRange=false
            debuglog "Cool not OOR"
        }
    }
    state.outofRange=outofRange
    if (outofRange){
        TempSensorPolling(false)
        unschedule(DeadmanCheck)
    }
    else{
        if (state.enable){
            runIn(60 * refreshInt, refreshTempSensor)
        }
    }
        
}

def TempSensorPolling(enable)
{
	if (enable){
		refreshTempSensor()
	}
	else{
        debuglog "Turn Off Polling"
		unschedule(refreshTempSensor)
	}
}

def refreshTempSensor()
{
    debuglog "Refreshing Temp Sensor"
	TemperatureSensor.refresh()
}

def debuglog(statement)
{   
               def logL = 0
    if (logLevel) logL = logLevel.toInteger()
    if (logL == 0) {return}//bail
    else if (logL >= 2)
               {
                              log.debug(statement)
               }
}
def infolog(statement)
{       
               def logL = 0
    if (logLevel) logL = logLevel.toInteger()
    if (logL == 0) {return}//bail
    else if (logL >= 1)
               {
                              log.info(statement)
    }
}
def getLogLevels(){
    return [["0":"None"],["1":"Running"],["2":"NeedHelp"]]
}


def setVersion(){
                state.version = "1.0.1" // Version number of this app
                state.InternalName = "ThermostatControlChild"   // this is the name used in the JSON file for this app
}
